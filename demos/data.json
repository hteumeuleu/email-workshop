{
    "status": "ok",
    "feed": {
        "url": "https://www.smashingmagazine.com/feed/",
        "title": "Articles on Smashing Magazine — For Web Designers And Developers",
        "link": "https://www.smashingmagazine.com/articles/",
        "author": "",
        "description": "Recent content in Articles on Smashing Magazine — For Web Designers And Developers",
        "image": ""
    },
    "items": [
        {
            "title": "Django Highlights: Wrangling Static Assets And Media Files (Part 4)",
            "pubDate": "2020-06-25 12:30:00",
            "link": "https://www.smashingmagazine.com/2020/06/django-highlights-wrangling-static-assets-media-files-part-4/",
            "guid": "https://www.smashingmagazine.com/2020/06/django-highlights-wrangling-static-assets-media-files-part-4/",
            "author": "Philip Kiely",
            "thumbnail": "https://www.smashingmagazine.com/images/logo/logo--red.png",
            "description": "Django websites involve a lot of files. It’s not just source code for the configuration, models, views, and templates, but also static assets: CSS and JavaScript, images, icons. As if that wasn’t enough already, sometimes users come along and want to upload their own files to your website. It’s enough to make any developer incredulous. Files everywhere!\nHere’s where I wish I could say (without caveats): “Don’t worry, Django has your back!",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/django-highlights-wrangling-static-assets-media-files-part-4/\">\n<title>Django Highlights: Wrangling Static Assets And Media Files (Part 4)</title>\n<article><header><h1>Django Highlights: Wrangling Static Assets And Media Files (Part 4)</h1>\n                  \n                    \n                    <address>Philip Kiely</address>\n                  \n                  <time datetime=\"2020-06-25T12:30:00+00:00\" class=\"op-published\">2020-06-25T12:30:00+00:00</time><time datetime=\"2020-06-25T12:30:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>Django websites involve a lot of files. It’s not just source code for the configuration, models, views, and templates, but also static assets: CSS and JavaScript, images, icons. As if that wasn’t enough already, sometimes users come along and want to upload their own files to your website. It’s enough to make any developer incredulous. Files everywhere!</p>\n\n<p>Here’s where I wish I could say (without caveats): “Don’t worry, Django has your back!” But unfortunately, when dealing with static assets and media files, there are a <em>lot</em> of caveats to deal with.</p>\n\n<p>Today, we’ll address storing and serving files for both single-server and scalable deployments while considering factors like compression, caching, and availability. We’ll also discuss the costs and benefits of CDNs and dedicated file storage solutions.</p>\n\n<p><strong>Note</strong>: <em>This is not a tutorial on how to deploy a Django site to any specific platform. Instead, like the other articles in the Django Highlights series (see below), it’s intended as a guide for front-end developers and designers to understand other parts of the process of creating a web application. Today, we’re focusing on what happens after the style hotfix or beautiful graphic you just finished is pushed to master. Together, we’ll develop an intuition for the strategies available to Django developers for serving these files to users worldwide in a secure, performant, and cost-effective manner.</em></p>\n\n<h4>\n<span class=\"rh\">Previous Parts</span> In The Series:</h4>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/02/django-highlights-user-models-authentication/\">Part 1</a>: User Models And Authentication</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/04/django-highlights-templating-saves-lines/\">Part 2</a>: Templating Saves Lines</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/04/django-highlights-models-admin-relational-database/\">Part 3</a>: Models, Admin, And Harnessing The Relational Database</li>\n</ul>\n<div data-component=\"FeaturePanel\" data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container hidden\"></div>\n\n\n<h3>Definitions</h3>\n\n<p>Most of these terms are pretty straightforward, but it’s worth taking a moment to establish a shared vocabulary for this discussion.</p>\n\n<p>The three types of files in a live Django application are:</p>\n\n<ol>\n<li>\n<strong>Source Code</strong><br>\nThe Python and HTML files that are created with the Django framework. These files are the core of the application. Source code files are generally pretty small, measured in kilobytes.</li>\n<li>\n<strong>Static Files</strong><br>\nAlso called “static assets,” these files include CSS and JavaScript, both written by the application developer and third-party libraries, as well as PDFs, software installers, images, music, videos, and icons. These files are only used client-side. Static files range from a few kilobytes of CSS to gigabytes of video.</li>\n<li>\n<strong>Media Files</strong><br>\nAny file uploaded by a user, from profile pictures to personal documents, is called a media file. These files need to be securely and reliably stored and retrieved for the user. Media files can be of any size, the user might upload a couple of kilobytes of plaintext to a few gigabytes of video. If you’re on the latter end of this scale, you probably need more specialized advice than this article is prepared to give.</li>\n</ol>\n<p>The two types of Django deployments are:</p>\n\n<ol>\n<li>\n<strong>Single-Server</strong><br>\nA single-server Django deployment is exactly what it sounds like: everything lives on a single server. This strategy is very simple and closely resembles the development environment, but cannot handle large or inconsistent amounts of traffic effectively. The single-server approach is only applicable for learning or demonstration projects, not real-word applications that require reliable uptime.</li>\n<li>\n<strong>Scalable</strong><br>\nThere are lots of different ways to deploy a Django project that allows it to scale to meet user demand. These strategies often involve spinning up and down numerous servers and using tools like load balancers and managed databases. Fortunately, we can effectively lump everything more complex than a single-server deployment into this category for the purposes of this article.</li>\n</ol>\n<h3>Option 1: Default Django</h3>\n\n<p>Small projects benefit from simple architecture. Django’s default handling of static assets and media files is just that: simple. For each, you have a root folder that stores the files and lives right next to the source code on the server. Simple. These root folders are generated and managed mostly through the <em>yourproject/settings.py</em> configuration.</p>\n\n<h4>Static Assets</h4>\n\n<p>The most important thing to understand when working with static files in Django is the <code>python manage.py collectstatic</code> command. This command rifles through the <em>static</em> folder of each app in the Django project and copies all static assets to the root folder. Running this command is an important part of deploying a Django project. Consider the following directory structure:</p>\n\n<pre><code class=\"language-py\">- project\n  - project\n    - settings.py\n    - urls.py\n    - ...\n  - app1\n    - static/\n      - app1\n        - style.css\n        - script.js\n        - img.jpg\n    - templates/\n    - views.py\n    - ...\n  - app2\n    - static/\n      - app2\n        - style.css\n        - image.png\n    - templates/\n    - views.py\n    - ...</code></pre>\n\n<p>Also assume the following settings in <em>project/settings.py</em>:</p>\n\n<pre><code class=\"language-py\">STATIC_URL = \"/static/\"\nSTATIC_ROOT = \"/path/on/server/to/djangoproject/static\"</code></pre>\n\n<p>Running the <code>python manage.py collectstatic</code> command will create the following folder on the server:</p>\n\n<pre><code class=\"language-py\">- /path/on/server/to/djangoproject/static\n  - app1\n    - style.css\n    - script.js\n    - img.jpg\n  - app2\n    - style.css\n    - image.png</code></pre>\n\n<p>Notice that within each static folder, there’s another folder with the app’s name. This is to prevent namespacing conflicts after the static files are collected; as you can see in the above file structure this keeps <em>app1/style.css</em> and <em>app2/style.css</em> distinct. From here, the application will look for static files in this structure at the <code>STATIC_ROOT</code> during production. As such, reference static files as follows in a template in <em>app1/templates/</em>:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-css\">{% load static %}\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{% static \"app1/style.css\" %}\"&gt;</code></pre>\n</div>\n\n<p>Django automatically figures out where to get the static file from in development to model this behavior, you do not need to run <code>collectstatic</code> during development.</p>\n\n<p>For more details, see <a href=\"https://docs.djangoproject.com/en/3.0/howto/static-files/\">the Django documentation</a>.</p>\n\n<h4>Media Files</h4>\n\n<p>Imagine a professional networking site with a database of users. Each of those users would have an associated profile, which might contain, among other things, an avatar image and a resume document. Here’s a short example model of that information:</p>\n\n<pre><code class=\"language-py\">from django.db import models\nfrom django.contrib.auth.models import User\n\ndef avatar_path(instance, filename):\n    return \"avatar_{}_{}\".format(instance.user.id, filename)\n\nclass Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    resume = models.FileField(upload_to=\"path/string\")\n    avatar = models.ImageField(upload_to=avatar_path)</code></pre>\n\n<p>For this to work, you need the following options in <em>project/settings.py</em>, like with static assets:</p>\n\n<pre><code class=\"language-py\">MEDIA_URL = \"/media/\"\nMEDIA_ROOT = \"/path/on/server/to/media\"</code></pre>\n\n<p>An <code>ImageField</code> inherits from <code>FileField</code>, so it shares the same parameters and capabilities. Both fields have an optional <code>upload_to</code> argument, which takes a string that is a path and appends it to the <code>MEDIA_ROOT</code> to store the file, which is then accessible by the same path on top of <code>MEDIA_URL</code>. The <code>upload_to</code> argument can also take a function that returns a string, as demonstrated with the <code>avatar_path</code> function.</p>\n\n<p>Make sure to omit the media files directory and its contents from version control. Its contents may conflict when two developers test the same application on different machines, and it is, unlike static assets, not a part of the deployable Django application.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Option 2: Django With Services</h3>\n\n<p>My guiding philosophy is to use tools for what they’re best at. Django is an amazing framework, and it provides great tooling out of the box for user authentication, server-side rendering, working with models and forms, administrative functions, and dozens of other essential aspects of building web applications. However, its tooling for handling static assets and media files is not, in my opinion, well-suited for production on scalable sites. The Django core developers recognize that many people choose alternate approaches to handling these files in production; the framework is very good at getting out of your way when you do. Most Django sites intended for general use will want to incorporate static assets and handle media files using these non-Django-specific approaches.</p>\n\n<h4>Static Assets On A CDN</h4>\n\n<p>While small-to-medium projects can get away without one, a CDN (content delivery network) is easy to use and improves the performance of applications of any size. A CDN is a network of servers, generally worldwide, that distributes and serves web content, mostly static assets. Popular CDNs include <a href=\"https://www.cloudflare.com/cdn/\">Cloudflare CDN</a>, <a href=\"https://aws.amazon.com/cloudfront/\">Amazon CloudFront</a>, and <a href=\"https://www.fastly.com/products/cdn\">Fastly</a>. To use a CDN, you upload your static files, then in your application reference them as follows:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-py\">&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.example.com/path/to/your/files/app1/style.css\"&gt;</code></pre>\n</div>\n\n<p>This process is easy to integrate with your Django deployment scripts. After running the <code>python manage.py collectstatic</code> command, copy the generated directory to your CDN (a process that varies substantially based on the service you’re using), then remove the static assets from the Django deployment package.</p>\n\n<p>In development, you’ll want to access different copies of your static assets than in production. This way, you can make changes locally without affecting the production site. You can either use local assets or run a second instance of the CDN to deliver the files. Configure <em>yourproject/settings.py</em> with some custom variable, like <code>CDN_URL</code>, and use that value in your templates to ensure you’re using the correct version of assets in development and production.</p>\n\n<p>One final note is that many libraries for CSS and JavaScript have free CDNs that most websites can use. If you’re loading, say, Bootstrap 4 or underscore.js, you can skip the hassle of using your own copy in development and the expense of serving your own copies in production by using these public CDNs.</p>\n\n<h4>Media Files with a Dedicated Filestore</h4>\n\n<p>No production Django site should store user files in a simple <em>/media/</em> folder somewhere on the server that runs the site. Here are three of the many reasons why not to:</p>\n\n<ol>\n<li>If you need to scale up the site by adding multiple servers, you need some way of copying and syncing the uploaded files across those servers.</li>\n<li>If a server crashes, the source code is backed up in your version control system, but media files aren’t backed up by default, unless you configured your server to do so, but for that effort you’d be better off using a dedicated filestore.</li>\n<li>In case of malicious activity, it’s somewhat better to keep user-uploaded files on a separate server from the one running the application, although this in no way removes the requirement to validate user-uploaded files.</li>\n</ol>\n<p>Integrating a third party to store your user-uploaded files is really easy. You don’t need to change anything in your code, except maybe removing or modifying the <code>upload_to</code> value of <code>FileField</code>s in your models, and configuring a few settings. For example, if you were planning to store your files in AWS S3, you’d want to do the following, which is very similar to the process of storing files with Google Cloud, Azure, Backblaze, or similar competing services.</p>\n\n<p>First, you’ll need to install the libraries <code>boto3</code> and <code>django-storages</code>. Then, you need to set up a bucket and IAM role on AWS, which is outside the scope of this article, but you can see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/walkthrough1.html\">instructions for here</a>. Once all of that is configured, you need to add three variables to your <em>project/settings.py</em>:</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-py\">DEFAULT_FILE_STORAGE = \"storages.backends.s3boto3.S3Boto3Storage\"\nAWS_STORAGE_BUCKET_NAME = \"BUCKET_NAME\"\nAWS_S3_REGION_NAME = \"us-east-2\"</code></pre>\n</div>\n\n<p>Additionally, you will need to set up credential access to your AWS bucket. Some tutorials will demonstrate adding an ID and secret key to your settings file or as environment variables, but these are insecure practices. Instead, use <code>django-storages</code> with the AWS CLI to configure the keys, as described <a href=\"https://docs.aws.amazon.com/cli/latest/reference/configure/\">here</a>. You may also be interested in the <code>django-storages</code> <a href=\"https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html\">documentation</a>.</p>\n\n<p>You don’t want development or testing media files to get mixed up with uploads from actual users. Avoiding this is pretty simple: set up multiple buckets, one for development (or one for each developer), one for testing, and one for production. Then, all you need to change is the <code>AWS_STORAGE_BUCKET_NAME</code> setting per environment and you’re good to go.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Performance And Availability</h3>\n\n<p>There are numerous factors that affect the performance and reliability of your website. Here are some important ones when considering static and media files that matter regardless of which approach you take to managing them.</p>\n\n<h4>Cost</h4>\n\n<p>Serving files to a user costs money for two reasons: storage and bandwidth. You have to pay the hosting provider to store the files for you, but you also have to pay them to serve the files. Bandwidth is substantially more expensive than storage (for example, AWS S3 charges 2.3 cents per gigabyte for storage versus 9 cents per gigabyte of data transfer out to the Internet at the time of writing). The economics of a file store like S3 or a CDN are different than the economics of a generalized host like a Digital Ocean droplet. Take advantage of specialization and economies of scale by moving expensive files to services designed for them. Furthermore, many file stores and CDNs offer free plans so sites that might be small enough to get away without using them can instead do so and reap the benefits without any additional infrastructure costs.</p>\n\n<h4>Compression and Transcoding</h4>\n\n<p>Most of the problems caused by static assets like photos and videos are because they are big files. Naturally, developers address this by trying to make these files smaller. There are a number of ways to do this using a mix of <a href=\"https://en.wikipedia.org/wiki/Data_compression\">compression</a> and <a href=\"https://en.wikipedia.org/wiki/Transcoding\">transcoding</a> in two general categories: lossless and lossy. Lossless compression retains the original quality of the assets but provides relatively modest decreases in file size. Lossy compression, or transcoding into a lossy format, allows for much smaller file sizes at the expense of losing some of the quality of the original artifact. An example of this is transcoding video to a lower bitrate. For details, check out <a href=\"https://www.smashingmagazine.com/2018/10/video-playback-on-the-web-part-2/\">this article about optimizing video delivery</a>. When serving large files over the web, bandwidth speeds often demand that you serve highly compressed artifacts, requiring lossy compression.</p>\n\n<p>Unless you’re YouTube, compression and transcoding doesn’t happen on the fly. Static assets should be appropriately formatted prior to deployment, and you can enforce basic file type and file size restrictions on user uploads to ensure sufficient compression and appropriate formatting in your users’ media files.</p>\n\n<h4>Minification</h4>\n\n<p>While files of JavaScript and CSS aren’t usually as large as images, they can often be compressed to squeeze into fewer bytes. This process is called <a href=\"https://en.wikipedia.org/wiki/Minification_(programming)\">minification</a>. Minification does not change the encoding of the files, they’re still text, and a minified file still needs to be valid code for its original language. Minified files retain their original extensions.</p>\n\n<p>The main thing removed in a minified file is unnecessary whitespace, and from the computer’s perspective almost all whitespace in CSS and JavaScript is unnecessary. Minification schemes also shorten variable names and remove comments.</p>\n\n<p>Minification by default obfuscates code; as a developer, you should work exclusively with non-minified files. Some automatic step during the deployment process should minify the files before they are stored and served. If you’re using a library provided by a third-party CDN, make sure you’re using the minified version of that library if available. HTML files can be minified, but as Django uses server-side rendering, the processing cost of doing so on the fly would most likely outweigh the small decrease in page size.</p>\n\n<h4>Global Availability</h4>\n\n<p>Just like it takes less time to send a letter to your neighbor than it does to send it across the country, so to does it take less time to transmit data nearby than across the world. One of the ways that a CDN improves page performance is by copying assets onto servers across the world. Then, when a client makes a request, they receive the static assets from the nearest server (often called an edge node), decreasing load times. One of the advantages to using a CDN with a Django site is decoupling the global distribution of your static assets from the global distribution of your code.</p>\n\n<h4>Client-Side Caching</h4>\n\n<p>What’s better than having a static file on a server near your user? Having the static file already stored on your user’s device! Caching is the process of storing the results of a computation or request so that they can be accessed repeatedly more quickly. Just like a CSS stylesheet can be cached around the world in a CDN, it can be cached in the client’s browser the first time they load a page from your site. Then, the stylesheet is available on the device itself in subsequent requests, so the client is making fewer requests, improving page load time, and decreasing bandwidth use.</p>\n\n<p>Browsers perform their own caching operations, but if your site enjoys substantial traffic, you can optimize your client-side caching behavior using <a href=\"https://docs.djangoproject.com/en/3.0/topics/cache/\">Django’s cache framework</a>.</p>\n\n<h3>In Conclusion</h3>\n\n<p>Again, my guiding philosophy is to use tools for what they’re best at. Single-server projects and small scalable deployments with only lightweight static assets can use Django’s built-in static asset management, but most applications should separate out assets to be served over a CDN.</p>\n\n<p>If your project is intended for any kind of real-word use, do not store media files with Django’s default method, instead use a service. With enough traffic, where “enough traffic” is a relatively small number on the scale of the Internet, the additional complications to architecture, the development process, and deployment are more than worth it for the performance, reliability, and cost savings of using a separate CDN and file storage solution for static and media files, respectively.</p>\n\n<h4><span class=\"rh\">Recommended Reading</span></h4>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/02/django-highlights-user-models-authentication/\">Part 1</a>: User Models And Authentication</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/04/django-highlights-templating-saves-lines/\">Part 2</a>: Templating Saves Lines</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/04/django-highlights-models-admin-relational-database/\">Part 3</a>: Models, Admin, And Harnessing The Relational Database</li>\n</ul>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(dm, ra, yk, il)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "A Practical Guide To Testing React Applications With Jest",
            "pubDate": "2020-06-24 12:00:00",
            "link": "https://www.smashingmagazine.com/2020/06/practical-guide-testing-react-applications-jest/",
            "guid": "https://www.smashingmagazine.com/2020/06/practical-guide-testing-react-applications-jest/",
            "author": "Adeneye David Abiodun",
            "thumbnail": "https://www.smashingmagazine.com/images/logo/logo--red.png",
            "description": "In this article, I’m going to introduce you to a React testing tool named Jest, along with the popular library Enzyme, which is designed to test React components. I’ll introduce you to Jest testing techniques, including: running tests, testing React components, snapshot testing, and mocking. If you are new to testing and wondering how to get started, you will find this tutorial helpful because we will start with an introduction to testing.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/practical-guide-testing-react-applications-jest/\">\n<title>A Practical Guide To Testing React Applications With Jest</title>\n<article><header><h1>A Practical Guide To Testing React Applications With Jest</h1>\n                  \n                    \n                    <address>Adeneye David Abiodun</address>\n                  \n                  <time datetime=\"2020-06-24T12:00:00+00:00\" class=\"op-published\">2020-06-24T12:00:00+00:00</time><time datetime=\"2020-06-24T12:00:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>In this article, I’m going to introduce you to a React testing tool named <a href=\"https://jestjs.io/en/\">Jest</a>, along with the popular library <a href=\"https://enzymejs.github.io/enzyme/\">Enzyme</a>, which is designed to test React components. I’ll introduce you to Jest testing techniques, including: running tests, testing React components, snapshot testing, and mocking.\nIf you are new to testing and wondering how to get started, you will find this tutorial helpful because we will start with an introduction to testing. By the end, you’ll be up and running, testing React applications using Jest and Enzyme. You should be familiar with <a href=\"https://reactjs.org/\">React</a> in order to follow this tutorial.</p>\n\n<h3>A Brief Introduction To Testing</h3>\n\n<p>Testing is a line-by-line review of how your code will execute. A suite of tests for an application comprises various bit of code to verify whether an application is executing successfully and without error. Testing also comes in handy when updates are made to code. After updating a piece of code, you can run a test to ensure that the update does not break functionality already in the application.</p>\n\n<h3>Why Test?</h3>\n\n<p>It’s good to understand why we doing something before doing it. So, why test, and what is its purpose?</p>\n\n<ol>\n<li>The first purpose of testing is to prevent regression. <a href=\"https://en.wikipedia.org/wiki/Regression_testing\">Regression</a> is the reappearance of a bug that had previously been fixed. It makes a feature stop functioning as intended after a certain event occurs.</li>\n<li>Testing ensures the functionality of complex components and modular applications.</li>\n<li>Testing is required for the effective performance of a software application or product.</li>\n</ol>\n<p>Testing makes an app more robust and less prone to error. It’s a way to verify that your code does what you want it to do and that your app works as intended for your users.</p>\n\n\n  <div data-component=\"FeaturePanel\" data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container hidden\"></div>\n\n\n<p>Let’s go over the types of testing and what they do.</p>\n\n<h4>Unit Test</h4>\n\n<p>In this type of test, individual units or components of the software are tested. A unit might be an individual function, method, procedure, module, or object. A unit test isolates a section of code and verifies its correctness, in order to validate that each unit of the software’s code performs as expected.</p>\n\n<p>In unit testing, individual procedures or functions are tested to guarantee that they are operating properly, and all components are tested individually. For instance, testing a function or whether a statement or loop in a program is functioning properly would fall under the scope of unit testing.</p>\n\n<h4>Component Test</h4>\n\n<p>Component testing verifies the functionality of an individual part of an application. Tests are performed on each component in isolation from other components. Generally, React applications are made up of several components, so component testing deals with testing these components individually.</p>\n\n<p>For example, consider a website that has different web pages with many components. Every component will have its own subcomponents. Testing each module without considering integration with other components is referred to as component testing.</p>\n\n<p>Testing like this in React requires more sophisticated tools. So, we would need Jest and sometimes more sophisticated tools, like Enzyme, which we will discuss briefly later.</p>\n\n<h4>Snapshot Test</h4>\n\n<p>A snapshot test makes sure that the user interface (UI) of a web application does not change unexpectedly. It captures the code of a component at a moment in time, so that we can compare the component in one state with any other possible state it might take.</p>\n\n<p>We will learn about snapshot testing in a later section.</p>\n\n<h3>Advantages and Disadvantages of Testing</h3>\n\n<p>Testing is great and should be done, but it has advantages and disadvantages.</p>\n\n<h4>Advantages</h4>\n\n<ol>\n<li>It prevents unexpected regression.</li>\n<li>It allows the developer to focus on the current task, rather than worrying about the past.</li>\n<li>It allows modular construction of an application that would otherwise be too complex to build.</li>\n<li>It reduces the need for manual verification.\n<br>\n</li>\n</ol>\n<h4>Disadvantages</h4>\n\n<ol>\n<li>You need to write more code, as well as debug and maintain.</li>\n<li>Non-critical test failures might cause the app to be rejected in terms of continuous integration.</li>\n</ol>\n<h3>Introduction to Jest</h3>\n\n<p><a href=\"https://jestjs.io/en/\">Jest</a> is a delightful JavaScript testing framework with a focus on simplicity. It can be installed with npm or Yarn. Jest fits into a broader category of utilities known as <a href=\"https://www.quora.com/What-is-a-test-runner\">test runners</a>. It works great for React applications, but it also works great outside of React applications.</p>\n\n<p><a href=\"https://enzymejs.github.io/enzyme/\">Enzyme</a> is a library that is used to test React applications. It’s designed to test components, and it makes it possible to write assertions that simulate actions that confirm whether the UI is working correctly.</p>\n\n<p>Jest and Enzyme complement each other so well, so in this article we will be using both.</p>\n\n<h3>Process Of Running A Test With Jest</h3>\n\n<p>In this section, we will be installing Jest and writing tests. If you are new to React, then I recommend using <a href=\"https://create-react-app.dev/\">Create React App</a>, because it is ready for use and ships with Jest.</p>\n\n<pre><code class=\"language-bash\">npm init react-app my-app\n</code></pre>\n\n<p>We need to install Enzyme ****and <code>enzyme-adapter-react-16</code> with <code>react-test-renderer</code> (the number should be based on the version of React you’re using).</p>\n\n<pre><code class=\"language-bash\">npm install --save-dev enzyme enzyme-adapter-react-16 react-test-renderer\n</code></pre>\n\n<p>Now that we have created our project with both Jest and Enzyme, we need to create a <code>setupTest.js</code> file in the <code>src</code> folder of the project. The file should look like this:</p>\n\n<pre><code class=\"language-javascript\">import { configure } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nconfigure({ adapter: new Adapter() });\n</code></pre>\n\n<p>This imports Enzyme and sets up the adapter to run our tests.</p>\n\n<p>Before continuing, let’s learn some basics. Some key things are used a lot in this article, and you’ll need to understand them.</p>\n\n<ul>\n<li>\n<code>it</code> or <code>test</code>\nYou would pass a function to this method, and the test runner would execute that function as a block of tests.</li>\n<li>\n<code>describe</code>\nThis optional method is for grouping any number of <code>it</code> or <code>test</code> statements.</li>\n<li>\n<code>expect</code>\nThis is the condition that the test needs to pass. It compares the received parameter to the matcher. It also gives you access to a number of matchers that let you validate different things. You can read more about it <a href=\"https://jestjs.io/docs/en/expect\">in the documentation</a>.</li>\n<li>\n<code>mount</code>\nThis method renders the full DOM, including the child components of the parent component, in which we are running the tests.</li>\n<li>\n<code>shallow</code>\nThis renders only the individual components that we are testing. It does not render child components. This enables us to test components in isolation.</li>\n</ul>\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Creating A Test File</h3>\n\n<p>How does Jest know what’s a test file and what isn’t? The first rule is that any files found in any directory with the name <code>__test__</code> are considered a test. If you put a JavaScript file in one of these folders, Jest will try to run it when you call Jest, for better or for worse. The second rule is that Jest will recognize any file with the suffix <code>.spec.js</code> or <code>.test.js</code>. It will search the names of all folders and all files in your entire repository.</p>\n\n<p>Let’s create our first test, for a React mini-application created for this tutorial. You can clone it <a href=\"https://github.com/daacode/react-jest\">on Git</a><a href=\"https://github.com/daacode/react-jest\">H</a><a href=\"https://github.com/daacode/react-jest\">ub</a>.  Run <code>npm install</code> to install all of the packages, and then <code>npm start</code> to launch the app. Check the <code>README.md</code> file for more information.</p>\n\n<p>Let’s open <code>App.test.js</code> to write our first test. First, check whether our app component renders correctly and whether we have specified an output:</p>\n\n<pre><code class=\"language-javascript\">it(\"renders without crashing\", () =&gt; {\n  shallow(&lt;App /&gt;);\n});\n\nit(\"renders Account header\", () =&gt; {\n  const wrapper = shallow(&lt;App /&gt;);\n  const welcome = &lt;h1&gt;Display Active Users Account Details&lt;/h1&gt;;\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n</code></pre>\n\n<p>In the test above, the first test, with <code>shallow</code>, checks to see whether our app component renders correctly without crashing. Remember that the <code>shallow</code> method renders only a single component, without child components.</p>\n\n<p>The second test checks whether we have specified an <code>h1</code>  tag output of “Display Active User Account” in our app component, with a <a href=\"https://jestjs.io/docs/en/expect.html\">Jest matcher</a> of <code>toEqual</code>.</p>\n\n<p>Now, run the test:</p>\n\n<pre><code class=\"language-bash\">npm run test \n/* OR */\nnpm test\n</code></pre>\n\n<p>The output in your terminal should like this:</p>\n\n<pre><code class=\"language-bash\">  PASS  src/App.test.js\n  √ renders without crashing (34ms)\n  √ renders Account header (13ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        11.239s, estimated 16s\nRan all test suites related to changed files.\n\nWatch Usage: Press w to show more.\n</code></pre>\n\n<p>As you can see, our test passed. It shows we have one test suite named <code>App.test.js</code>, with two successful tests when Jest ran. We’ll talk about snapshot testing later, and you will also get to see an example of a failed test.</p>\n\n<h3>Skipping Or Isolating A Test</h3>\n\n<p>Skipping or isolating a test means that when Jest runs, a specific marked test is not run.</p>\n\n<pre><code class=\"language-javascript\">it.skip(\"renders without crashing\", () =&gt; {\n  shallow(&lt;App /&gt;);\n});\n\nit(\"renders Account header\", () =&gt; {\n  const wrapper = shallow(&lt;App /&gt;);\n  const header = &lt;h1&gt;Display Active Users Account Details&lt;/h1&gt;;\n  expect(wrapper.contains(header)).toEqual(true);\n});\n</code></pre>\n\n<p>Our first test will be skipped because we’ve used the <code>skip</code> method to isolate the test. So, it will not run or make any changes to our test when Jest runs. Only the second one will run. You can also use <code>it.only()</code>.</p>\n\n<p>It’s a bit frustrating to make changes to a test file and then have to manually run <code>npm test</code> again. Jest has a nice feature called watch mode, which watches for file changes and runs tests accordingly. To run Jest in watch mode, you can run <code>npm test -- --watch</code> or <code>jest --watch</code>. I would also recommend leaving Jest running in the terminal window for the rest of this tutorial.</p>\n\n<h3>Mocking Function</h3>\n\n<p>A mock is a convincing duplicate of an object or module without any real inner workings. It might have a tiny bit of functionality, but compared to the real thing, it’s a mock. It can be created automatically by Jest or manually.</p>\n\n<p>Why should we mock? Mocking reduces the number of dependencies — that is, the number of related files that have to be loaded and parsed when a test is run. So, using a lot of mocks makes tests execute more quickly.</p>\n\n<p>Mock functions are also known as “spies”, because they let you spy on the behavior of a function that is called directly by some other code, rather than only testing the output.</p>\n\n<p>There are two ways to mock a function: either by creating a mock function to use it in test code, or by writing a manual mock to override a module dependency.</p>\n\n<p>Manual mocks ****are used to stub out functionality with mock data. For example, instead of accessing a remote resource, like a website or a database, you might want to create a manual mock that allows you to use fake data.</p>\n\n<p>We will use a mock function in the next section.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Testing React Components</h3>\n\n<p>The section will combine all of the knowledge we have gained so far in understanding how to test React components. Testing involves making sure the output of a component hasn’t unexpectedly changed to something else. Constructing components in the right way is by far the most effective way to ensure successful testing.</p>\n\n<p>One thing we can do is to test components props — specifically, testing whether props from one component are being passed to another. Jest and the Enzyme API allow us to create a mock function to simulate whether props are being passed between components.</p>\n\n<p>We have to pass the user-account props from the main <code>App</code> component to the <code>Account</code> component. We need to give user-account details to <code>Account</code> in order to render the active account of users. This is where mocking comes in handy, enabling us to test our components with fake data.</p>\n\n<p>Let’s create a mock for the <code>user</code> props:</p>\n\n<pre><code class=\"language-javascript\">const user = {\n  name: \"Adeneye David\",\n  email: \"david@gmail.com\",\n  username: \"Dave\",\n};\n</code></pre>\n\n<p>We have created a manual mock function in our test file and wrapped it around the components. Let’s say we are testing a large database of users. Accessing the database directly from our test file is not advisable. Instead, we create a mock function, which enables us to use fake data to test our component.</p>\n\n<pre><code class=\"language-javascript\">describe(\"<account></account>\", () =&gt; {\n  it(\"accepts user account props\", () =&gt; {\n    const wrapper = mount(&lt;Account user={user} /&gt;);\n    expect(wrapper.props().user).toEqual(user);\n  });\n  it(\"contains users account email\", () =&gt; {\n    const wrapper = mount(&lt;Account user={user} /&gt;);\n    const value = wrapper.find(\"p\").text();\n    expect(value).toEqual(\"david@gmail.com\");\n  });\n});\n</code></pre>\n\n<p>We have two tests above, and we use a <code>describe</code> layer, which takes the component being tested. By specifying the props and values that we expect to be passed by the test, we are able to proceed.</p>\n\n<p>In the first test, we check whether the props that we passed to the mounted component equal the mock props that we created above.</p>\n\n<p>For the second test, we pass the user props to the mounted <code>Account</code> component. Then, we check whether we can find the <code>&lt;p&gt;</code> element that corresponds to what we have in the <code>Account</code> component. When we run the test suite, you’ll see that the test runs successfully.</p>\n\n<p>We can also test the state of our component. Let’s check whether the state of the error message is equal to null:</p>\n\n<pre><code class=\"language-javascript\">it(\"renders correctly with no error message\", () =&gt; {\n  const wrapper = mount(<app></app>);\n  expect(wrapper.state(\"error\")).toEqual(null);\n});\n</code></pre>\n\n<p>In this test, we check whether the state of our component error is equal to null, using a <code>toEqual()</code> matcher. If there is an error message in our app, the test will fail when run.</p>\n\n<p>In the next section, we will go through how to test React components with snapshot testing, another amazing technique.</p>\n\n<h3>Snapshot Testing</h3>\n\n<p>Snapshot testing captures the code of a component at a moment in time, in order to compare it to a reference snapshot file stored alongside the test. It is used to keep track of changes in an app’s UI.</p>\n\n<p>The actual code representation of a snapshot is a JSON file, and this JSON contains a record of what the component looked like when the snapshot was made. During a test, Jest compares the contents of this JSON file to the output of the component during the test. If they match, the test passes; if they don’t, the test fails.</p>\n\n<p>To convert an Enzyme wrapper to a format that is compatible with Jest snapshot testing, we have to install <code>enzyme-to-json</code>:</p>\n\n<pre><code class=\"language-bash\">npm install --save-dev enzyme-to-json\n</code></pre>\n\n<p>Let’s create our snapshot test. When we run it the first time, the snapshot of that component’s code will be composed and saved in a new <code>__snapshots__</code> folder in the <code>src</code> directory.</p>\n\n<pre><code class=\"language-javascript\">it(\"renders correctly\", () =&gt; {\n  const tree = shallow(&lt;App /&gt;);\n  expect(toJson(tree)).toMatchSnapshot();\n});\n</code></pre>\n \n\n<p>When the test above runs successfully, the current UI component will be compared to the existing one.</p>\n\n<p>Now, let’s run the test:</p>\n\n<pre><code class=\"language-bash\">npm run test\n</code></pre>\n\n<p>When the test suite runs, a new snapshot will be generated and saved to the <code>__snapshots__</code> folder. When we run a test subsequently, Jest will check whether the components match the snapshot.</p>\n\n<p>As explained in the previous section, that <code>shallow</code> method from the Enzyme package is used to render a single component and nothing else. It doesn’t render child components. Rather, it gives us a nice way to isolate code and get better information when debugging. Another method, named <code>mount</code>, is used to render the full DOM, including the child components of the parent component, in which we are running the tests.</p>\n\n<p>We can also update our snapshot, Let’s make some changes to our component in order to make our test fail, which will happen because the component no longer corresponds to what we have in the snapshot file. To do this, let’s change the <code>&lt;h3&gt;</code> tag in our component from <code>&lt;h3&gt; Loading...&lt;/h3&gt;</code> to <code>&lt;h3&gt;Fetching Users...&lt;/h3&gt;</code>. When the test runs, this what we will get in the terminal:</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\"> FAIL  src/App.test.js (30.696s)\n  × renders correctly (44ms)\n\n  ● renders correctly\n\n    expect(received).toMatchSnapshot()\n    Snapshot name: `renders correctly\n1\n\n    - Snapshot\n    + Received\n\n      <fragment><h1>\n          Display Active Users Account Details\n        </h1>\n        <h3>\n    -     Loading...\n    +     Fetching Users...\n        </h3>\n      </fragment>\n\n       7 | it(\"renders correctly\", ()\n=&gt; {\n       8 |   const wrapper = shallow(<app></app>);\n    &gt;  9 |   expect(toJson(wrapper)).toMatchSnapshot();\n         |                           ^      10 | });\n      11 |\n      12 | /* it(\"renders without crashing\", () =&gt; {\n\n      at Object.<anonymous> (src/App.test.js:9:27)\n\n › 1 snapshot failed.\nSnapshot Summary\n › 1 snapshot failed from 1 test suite. Inspect your code changes or press `u` to update them.\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 total\nSnapshots:   1 failed, 1 total\nTime:        92.274s\nRan all test suites related to changed files.\n\nWatch Usage: Press w to show more.\n</anonymous></code></pre>\n</div>\n\n<p>If we want our test to pass, we would either change the test to its previous state or update the snapshot file. In the command line, Jest provides instruction on how to update the snapshot. First, press <code>w</code> in the command line to show more, and then press <code>u</code> to update the snapshot.</p>\n\n<pre><code>› Press u to update failing snapshots.\n</code></pre>\n\n<p>When we press <code>u</code> to update the snapshot, the test will pass.</p>\n\n<h3>Conclusion</h3>\n\n<p>I hope you’ve enjoyed working through this tutorial. We’ve learned some Jest testing techniques using the Enzyme testing library. I’ve also introduced you to the process of running a test, testing React components, mocking, and snapshot testing. If you have any questions, you can leave them in the comments section below, and I’ll be happy to answer every one and work through any issues with you.</p>\n\n<h4>Resources And Further Reading</h4>\n\n<ul>\n<li><a href=\"https://jestjs.io/docs/en/getting-started\">Jest documentation</a></li>\n<li><a href=\"https://enzymejs.github.io/enzyme/docs/api/\">Enzyme documentation</a></li>\n<li>“<a href=\"https://www.freecodecamp.org/news/testing-react-hooks/\">How to Test React Components: The Complete Guide</a>”, Mohammad Iqbal, freeCodeCamp</li>\n<li>“<a href=\"https://medium.com/codeclan/testing-react-with-jest-and-enzyme-20505fec4675\">Testing React With Jest and Enzyme</a>”, Dominic Fraser, CodeClan</li>\n</ul>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ks, ra, il, al)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "How Web Designers Can Help Restaurants Move Into Digital Experiences",
            "pubDate": "2020-06-23 12:00:00",
            "link": "https://www.smashingmagazine.com/2020/06/web-designers-help-restaurants-digital-experiences/",
            "guid": "https://www.smashingmagazine.com/2020/06/web-designers-help-restaurants-digital-experiences/",
            "author": "Suzanne Scacca",
            "thumbnail": "https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png",
            "description": "As much as I’ve always loved the experience of going out to eat and ordering in takeout, it’s very rare that I enjoy visiting a restaurant’s website. But I get it. The restaurant industry tends to run on very slim profit margins, so it’s hard to justify spending money on a professionally designed website when all they want it to do is list their hours of operation and menu.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/web-designers-help-restaurants-digital-experiences/\">\n<title>How Web Designers Can Help Restaurants Move Into Digital Experiences</title>\n<article><header><h1>How Web Designers Can Help Restaurants Move Into Digital Experiences</h1>\n                  \n                    \n                    <address>Suzanne Scacca</address>\n                  \n                  <time datetime=\"2020-06-23T12:00:00+00:00\" class=\"op-published\">2020-06-23T12:00:00+00:00</time><time datetime=\"2020-06-23T12:00:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>As much as I’ve always loved the experience of going out to eat and ordering in takeout, it’s very rare that I enjoy visiting a restaurant’s website. But I get it. The restaurant industry tends to run on very slim profit margins, so it’s hard to justify spending money on a professionally designed website when all they want it to do is list their hours of operation and menu.</p>\n\n<p>However, I envision all that changing in 2020 (and beyond) as restaurants are forced to expand into digital in order to survive. Unlike a website that a novice might hack together with a cheap site builder, establishing a competitive digital presence isn’t something they’re going to be able to do on their own.</p>\n\n<p>That’s why web designers should seriously start thinking about expanding into this niche.</p>\n\n<h3>How Web Designers Can Help Restaurants Move into Digital</h3>\n\n<p>Usually, when something serious shakes up the restaurant industry, those that want to survive will adopt newer and better technologies to adapt. So, it’s not like restaurants are strangers to digital transformation. Until now, though, the focus has mainly been on investing in technology that improves how they work in-house.</p>\n\n<p>With everything that’s happened in 2020, though, restaurants are going to need web designers’ help in doing three things that ensure their survival in an increasingly digital world:</p>\n\n\n  <div data-component=\"FeaturePanel\" data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container hidden\"></div>\n\n\n<h4>1. Modernize The Restaurant Website</h4>\n\n<p>Whenever I write one of these posts, I spend time reviewing a few dozen websites to find the best examples to make my point. I’m not going to lie, this one was tough. While I knew I could turn to national chain restaurants to find modern-looking websites, I had a really hard time with others.</p>\n\n<p>While it’s not impossible to find an independent restaurant operator or local chain that has a great-looking website in 2020, I’d say that at least half of them are way behind the times, if they even have a website at all.</p>\n\n<p>Remember when websites were designed like this?</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png\" sizes=\"100vw\" alt=\"A blurred-out website to demonstrate how independent restaurants still have unresponsive designs\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      An outdated restaurant website in 2020, blurred out to protect its identity. (Source: Anonymous) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ada67f96-0b9f-46ea-97c7-547da5fda0be/anonymous-restaurant-website.png\">Large preview</a>)\n    </figcaption></figure><p>I’ve blurred out the restaurant’s name and details to protect its identity, but you can still get a sense of how bad this design is for 2020.</p>\n\n<p>Restaurant websites can’t afford to be crappy, non-responsive placeholders anymore. They need to become impressive digital presences that set the stage for what customers will experience when interacting with restaurants as diners.</p>\n\n<p>Let’s take a look at how <a href=\"https://www.in-n-out.com/\">In-N-Out Burger</a> has nailed modern web design. The first thing you’ll notice is it’s a <strong>responsive design</strong>. On desktop, the website fits the full width of the screen, so there’s no wasted space around the border. It looks good on a mobile device, too:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b868d6f-c601-4d59-aa37-4b387e07b560/innoutburger-restaurant-website-on-mobile.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b868d6f-c601-4d59-aa37-4b387e07b560/innoutburger-restaurant-website-on-mobile.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b868d6f-c601-4d59-aa37-4b387e07b560/innoutburger-restaurant-website-on-mobile.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b868d6f-c601-4d59-aa37-4b387e07b560/innoutburger-restaurant-website-on-mobile.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b868d6f-c601-4d59-aa37-4b387e07b560/innoutburger-restaurant-website-on-mobile.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b868d6f-c601-4d59-aa37-4b387e07b560/innoutburger-restaurant-website-on-mobile.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b868d6f-c601-4d59-aa37-4b387e07b560/innoutburger-restaurant-website-on-mobile.png\" sizes=\"70vw\" alt=\"In-N-Out Burger website on mobile\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      The In-N-Out Burger mobile website is responsive and easy to read. (Source: <a href=\"https://www.in-n-out.com/\">In-N-Out Burger</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6b868d6f-c601-4d59-aa37-4b387e07b560/innoutburger-restaurant-website-on-mobile.png\">Large preview</a>)\n    </figcaption></figure><p>Also, take notice of the <strong>images</strong>. This is a burger joint, so you should expect the website to be full of burger photos, which it is. However, there’s something interesting to note about the burgers you find on the site.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a09417b-a7c3-4753-853b-54a65dd67ecf/innoutburger-restaurant-website.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a09417b-a7c3-4753-853b-54a65dd67ecf/innoutburger-restaurant-website.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a09417b-a7c3-4753-853b-54a65dd67ecf/innoutburger-restaurant-website.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a09417b-a7c3-4753-853b-54a65dd67ecf/innoutburger-restaurant-website.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a09417b-a7c3-4753-853b-54a65dd67ecf/innoutburger-restaurant-website.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a09417b-a7c3-4753-853b-54a65dd67ecf/innoutburger-restaurant-website.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a09417b-a7c3-4753-853b-54a65dd67ecf/innoutburger-restaurant-website.png\" sizes=\"100vw\" alt=\"In-N-Out Burger website photos and transitions\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      The In-N-Out Burger website uses perfectly framed images and well-chosen transitions. (Source: <a href=\"https://www.in-n-out.com/\">In-N-Out Burger</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/6a09417b-a7c3-4753-853b-54a65dd67ecf/innoutburger-restaurant-website.png\">Large preview</a>)\n    </figcaption></figure><p>When someone enters a page where there’s a burger photo, the food slides into the frame as if someone were sliding it over to a customer in the restaurant. It’s a neat little transition and many visitors to the site might not even realize what’s happening, but it makes the experience feel more lifelike and interactive.</p>\n\n<p>Transitions aren’t the only things you can do to create this sort of experience. Background videos taken within the establishment work just as well as it gives customers the opportunity to walk through the establishment instead of relying on static images that only paint part of the picture.</p>\n\n<p>Another thing restaurant websites need to improve is how they’re <strong>organized</strong>.</p>\n\n<p>When people are ready to go out to eat or to dine in, don’t waste their time trying to force the restaurant’s history down their throats (which many of these sites surprisingly do). The navigation as well as the order in which CTAs appear on the home page should reflect the actions customers want to take.</p>\n\n<p>The thought process most likely goes like this:</p>\n\n<ol>\n<li>“I’m not sure what to order. Where’s the menu?” (Menu)</li>\n<li>“Do I need to make a reservation or can we just go whenever?” (Reservations)</li>\n<li>“Where is this place again?” (Locations <em>or</em> Contact)</li>\n</ol>\n<p>Or, these days, #2 looks more like this:</p>\n\n<ul>\n<li>“Do they do takeout? I wonder if they’ll deliver it.” (Order Online)</li>\n</ul>\n<p>There are other things customers might want to do on the website. Like buy gift cards or merchandise, sign up for rewards or apply for a job.</p>\n\n<p>So, while the above tasks should be a priority in terms of what visitors see first, make sure to look at the site’s data to see what else they’re interested in doing. Then, make sure those popular actions take center stage in the navigation and site design.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4>2. Empower Them to Diversify Their Income</h4>\n\n<p>Under normal circumstances, profitability is a problem for many restaurants. Add a crisis to the mix and it’s going to become downright impossible to generate any profit — that is if they rely solely on dine-in business.</p>\n\n<p>Long before COVID-19, consumers were already showing a growing preference for digital dining solutions.</p>\n\n<p>According to <a href=\"https://www.prnewswire.com/news-releases/77-of-americans-would-rather-eat-a-homemade-meal-than-eat-out-in-2019-300762304.html\">Peapod</a>, 77% of U.S. consumers said they preferred eating at home than going out. But that doesn’t necessarily translate to ordering in from a restaurant.</p>\n\n<ul>\n<li>27% preferred to order groceries online and pick them up from the store.</li>\n<li>26% planned to use grocery delivery.</li>\n<li>20% were interested in meal kits.</li>\n</ul>\n<p>Then, you have information from <a href=\"https://www.restaurant.org/downloads/pdfs/research/research_offpremises_201910\">Technomic and the National Restaurant Association</a> that found that about <strong>60% of all restaurant sales in the U.S. come from off-premise dining</strong>.</p>\n\n<p>For restaurants that haven’t yet made the leap to digital dining options, they’re going to have to ASAP. This isn’t just a temporary thing either.</p>\n\n<blockquote class=\"pull-quote\">\n  <p>\n    <a class=\"pull-quote__link\" aria-label=\"Share on Twitter\" href=\"http://twitter.com/share?text=Restaurants%20that%20fail%20to%20digitize%20going%20forward%20won%E2%80%99t%20survive.%0A&amp;url=https://smashingmagazine.com%2F2020%2F06%2Fweb-designers-help-restaurants-digital-experiences%2F\">\n      Restaurants that fail to digitize going forward won’t survive.\n\n    </a>\n  </p>\n  <div class=\"pull-quote__quotation\">\n    <div class=\"pull-quote__bg\">\n      <span class=\"pull-quote__symbol\">“</span>\n</div>\n  </div>\n</blockquote>\n\n<p>So, web designers are going to be needed to help them build out the following:</p>\n\n<ul>\n<li>An online ordering system for their website or a link to an external service,</li>\n<li>A reservation system (for when in-house dining is available).</li>\n</ul>\n<p>That’s just the bare minimum though. For instance, this is what <a href=\"https://www.snoozeeatery.com/\">Snooze Eatery</a> has done:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1a206ee-d741-4a2e-89ef-4b1aae21f03a/snooze-online-ordering.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1a206ee-d741-4a2e-89ef-4b1aae21f03a/snooze-online-ordering.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1a206ee-d741-4a2e-89ef-4b1aae21f03a/snooze-online-ordering.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1a206ee-d741-4a2e-89ef-4b1aae21f03a/snooze-online-ordering.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1a206ee-d741-4a2e-89ef-4b1aae21f03a/snooze-online-ordering.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1a206ee-d741-4a2e-89ef-4b1aae21f03a/snooze-online-ordering.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1a206ee-d741-4a2e-89ef-4b1aae21f03a/snooze-online-ordering.png\" sizes=\"100vw\" alt=\"Snooze Eatery online delivery or pickup\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Snooze Eatery advertises delivery or pickup on its website. (Source: <a href=\"https://www.snoozeeatery.com/\">Snooze Eatery</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d1a206ee-d741-4a2e-89ef-4b1aae21f03a/snooze-online-ordering.png\">Large preview</a>)\n    </figcaption></figure><p>The first thing visitors see on the website is the online ordering option. When they click “Place Your Order”, they’re taken to the restaurant’s proprietary ordering portal:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d05553d2-bdf3-440b-a0bf-060e62b91a30/snooze-online-ordering-portal.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d05553d2-bdf3-440b-a0bf-060e62b91a30/snooze-online-ordering-portal.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d05553d2-bdf3-440b-a0bf-060e62b91a30/snooze-online-ordering-portal.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d05553d2-bdf3-440b-a0bf-060e62b91a30/snooze-online-ordering-portal.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d05553d2-bdf3-440b-a0bf-060e62b91a30/snooze-online-ordering-portal.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d05553d2-bdf3-440b-a0bf-060e62b91a30/snooze-online-ordering-portal.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d05553d2-bdf3-440b-a0bf-060e62b91a30/snooze-online-ordering-portal.png\" sizes=\"100vw\" alt=\"Snooze Eatery online ordering portal\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Snooze Eatery’s online ordering portal. (Source: <a href=\"https://www.snoozeeatery.com/\">Snooze Eatery</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/d05553d2-bdf3-440b-a0bf-060e62b91a30/snooze-online-ordering-portal.png\">Large preview</a>)\n    </figcaption></figure><p>This in and of itself is a great solution for restaurants to have available through their websites as it allows them to control the ordering process and capture more of the profits (but that’s up to your clients to decide, of course). That said, many restaurants are getting creative and going beyond traditional online ordering options.</p>\n\n<p>Below the fold on the Snooze Eatery site, visitors will find this banner:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95922ace-635e-422a-a8b8-65b02b6a0840/snooze-mealkits-groceries.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95922ace-635e-422a-a8b8-65b02b6a0840/snooze-mealkits-groceries.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95922ace-635e-422a-a8b8-65b02b6a0840/snooze-mealkits-groceries.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95922ace-635e-422a-a8b8-65b02b6a0840/snooze-mealkits-groceries.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95922ace-635e-422a-a8b8-65b02b6a0840/snooze-mealkits-groceries.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95922ace-635e-422a-a8b8-65b02b6a0840/snooze-mealkits-groceries.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95922ace-635e-422a-a8b8-65b02b6a0840/snooze-mealkits-groceries.png\" sizes=\"100vw\" alt=\"Snooze Eatery neighborhood provisions: family-style meal kits and food essentials\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Snooze Eatery now offers neighborhood provisions. (Source: <a href=\"https://www.snoozeeatery.com/\">Snooze Eatery</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/95922ace-635e-422a-a8b8-65b02b6a0840/snooze-mealkits-groceries.png\">Large preview</a>)\n    </figcaption></figure><p>As I mentioned earlier, there’s a good number of people who want to be able to order food online but then prepare it for themselves at home. While that would previously have left restaurants high and dry, that’s not the case anymore as many restaurants are expanding their offering to include family-style meal kits and groceries like Snooze.</p>\n\n<p>This alone means that web designers are going to become increasingly more important for restaurants. And don’t expect the work to end there. Restaurants will also need your help building other monetized offerings into their websites. For instance:</p>\n\n<ul>\n<li>Gift cards;</li>\n<li>Merchandise;</li>\n<li>Subscription services for meal kits, alcohol deliveries and more;</li>\n<li>Online memberships for cooking classes, premium recipes, etc.</li>\n</ul>\n<p>If they don’t have one yet, they’ll also probably need help creating a rewards and account management system as well.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4>3. Fix Their Brand Images on Third-party Sites</h4>\n\n<p>Although the website should be the engine that powers everything for the business online, restaurants need other sites to help with visibility, too. For example:</p>\n\n<ul>\n<li>\n<strong>Facebook</strong> to share photos, advertise location information and collect customer reviews;</li>\n<li>\n<strong>Instagram</strong> to share photos, restaurant updates and customer-generated content;</li>\n<li>\n<strong>Yelp</strong> and <strong>TripAdvisor</strong> to collect customer reviews and feedback;</li>\n<li>\n<strong>Google My Business</strong> to create a local presence in Google search and Maps as well as to collect reviews;</li>\n<li>Delivery services like <strong>DoorDash</strong> to outsource delivery to;</li>\n<li>Reservation sites like <strong>OpenTable</strong> to outsource reservation bookings to.</li>\n</ul>\n<p>If customers are looking for restaurants online, they need to be willing and able to meet them where they are… before eventually bringing them to the website.</p>\n\n<p>Although it’s ultimately the restaurant’s responsibility to create these pages, you should provide assistance when it comes to the visual branding piece. For one, it ensures that there’s some consistency between all their platforms. Also, it enables you to fill in missing pieces that restaurateurs might not think about.</p>\n\n<p>Let’s take a look at Rhode Island staple, <a href=\"https://www.iggysri.com/\">IGGY’S</a>:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ebc0d3b-bedd-433a-9288-8111ca46d52f/iggysri-website.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ebc0d3b-bedd-433a-9288-8111ca46d52f/iggysri-website.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ebc0d3b-bedd-433a-9288-8111ca46d52f/iggysri-website.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ebc0d3b-bedd-433a-9288-8111ca46d52f/iggysri-website.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ebc0d3b-bedd-433a-9288-8111ca46d52f/iggysri-website.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ebc0d3b-bedd-433a-9288-8111ca46d52f/iggysri-website.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ebc0d3b-bedd-433a-9288-8111ca46d52f/iggysri-website.png\" sizes=\"100vw\" alt=\"IGGY’S website with picture of clamcakes and 3 options for online ordering\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      IGGY’S website visitors are introduced to the restaurant with an image of its iconic clamcakes. (Source: <a href=\"https://www.iggysri.com/\">IGGY’S</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5ebc0d3b-bedd-433a-9288-8111ca46d52f/iggysri-website.png\">Large preview</a>)\n    </figcaption></figure><p>The waterfront eatery immediately gets down to business and provides visitors with 3 options for ordering online (based on which location they want to go to).</p>\n\n<p>Here’s what the online ordering portal looks like:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/336c4cc8-f420-4962-876e-5e4a2c565c82/iggys-online-ordering.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/336c4cc8-f420-4962-876e-5e4a2c565c82/iggys-online-ordering.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/336c4cc8-f420-4962-876e-5e4a2c565c82/iggys-online-ordering.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/336c4cc8-f420-4962-876e-5e4a2c565c82/iggys-online-ordering.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/336c4cc8-f420-4962-876e-5e4a2c565c82/iggys-online-ordering.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/336c4cc8-f420-4962-876e-5e4a2c565c82/iggys-online-ordering.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/336c4cc8-f420-4962-876e-5e4a2c565c82/iggys-online-ordering.png\" sizes=\"100vw\" alt=\"IGGY’S online ordering portal\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      IGGY’S restaurant’s online ordering portal. (Source: <a href=\"https://www.iggysri.com/\">IGGY’S</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/336c4cc8-f420-4962-876e-5e4a2c565c82/iggys-online-ordering.png\">Large preview</a>)\n    </figcaption></figure><p>Notice how good this looks. It takes what would otherwise be a text-only menu and turns it into something much more attractive and, arguably, more effective in driving up sales.</p>\n\n<p>Now, contrast that with IGGY’S online ordering through <a href=\"https://www.doordash.com/\">DoorDash</a>:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/017cf5dd-7c97-4e12-b0f8-6e434294196e/doordash-iggysri.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/017cf5dd-7c97-4e12-b0f8-6e434294196e/doordash-iggysri.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/017cf5dd-7c97-4e12-b0f8-6e434294196e/doordash-iggysri.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/017cf5dd-7c97-4e12-b0f8-6e434294196e/doordash-iggysri.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/017cf5dd-7c97-4e12-b0f8-6e434294196e/doordash-iggysri.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/017cf5dd-7c97-4e12-b0f8-6e434294196e/doordash-iggysri.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/017cf5dd-7c97-4e12-b0f8-6e434294196e/doordash-iggysri.png\" sizes=\"100vw\" alt=\"DoorDash online ordering for IGGY’s\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      DoorDash customers can order online from IGGY’s restaurant. (Source: <a href=\"https://www.doordash.com/\">DoorDash</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/017cf5dd-7c97-4e12-b0f8-6e434294196e/doordash-iggysri.png\">Large preview</a>)\n    </figcaption></figure><p>The items on this page rarely come with descriptions or images.</p>\n\n<p>Now, IGGY’S is a well-known restaurant around Rhode Island, so this might not be a dealbreaker for online customers. However, new customers might approach the menu with more trepidation than the one available through the IGGY’S website since it’s devoid of details.</p>\n\n<p>This is where your visual-centric approach comes in handy. By making sure each item comes with a high-resolution and mouth-watering photo (the same as the one used on the site), you can optimize this sales opportunity for them.</p>\n\n<p>It’s also important to ensure the brand elements are consistently presented. That way, if an existing customer runs across their favorite restaurant on DoorDash, they won’t hesitate to order because they’ll instantly know it’s their favorite restaurant.</p>\n\n<p>For example, the logo on DoorDash is nothing like the one on the website in terms of quality or looks:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/465cdd8f-d45a-4f3d-911d-3ddd729dcddd/doordash-iggys-logo.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/465cdd8f-d45a-4f3d-911d-3ddd729dcddd/doordash-iggys-logo.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/465cdd8f-d45a-4f3d-911d-3ddd729dcddd/doordash-iggys-logo.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/465cdd8f-d45a-4f3d-911d-3ddd729dcddd/doordash-iggys-logo.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/465cdd8f-d45a-4f3d-911d-3ddd729dcddd/doordash-iggys-logo.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/465cdd8f-d45a-4f3d-911d-3ddd729dcddd/doordash-iggys-logo.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/465cdd8f-d45a-4f3d-911d-3ddd729dcddd/doordash-iggys-logo.png\" sizes=\"100vw\" alt=\"DoorDash logo and location information for IGGY’S RI\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      The DoorDash logo for IGGY’S doesn’t match the one on the website. (Source: <a href=\"https://www.doordash.com/\">DoorDash</a>) (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/465cdd8f-d45a-4f3d-911d-3ddd729dcddd/doordash-iggys-logo.png\">Large preview</a>)\n    </figcaption></figure><p>Be it the logo or another branded element, you want to make sure that 1) it matches the website and 2) looks good. This goes for online ordering sites like DoorDash as well as all the other ones I mentioned earlier.</p>\n\n<h3>Wrapping Up</h3>\n\n<p>We’re at a point now where restaurants can no longer be reluctant or stingy about improving their digital presence. And, as a web designer, this should get you excited.</p>\n\n<p>There’s a lot you can do to help businesses in this space beyond designing basic websites. Because so much of their digital transformation involves making sales online, you’ll get to design experiences that are intuitive, modern, and mouth-watering while also creating new monetized pathways for them.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, yk, il)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "An Introduction To SWR: React Hooks For Remote Data Fetching",
            "pubDate": "2020-06-22 12:00:00",
            "link": "https://www.smashingmagazine.com/2020/06/introduction-swr-react-hooks-remote-data-fetching/",
            "guid": "https://www.smashingmagazine.com/2020/06/introduction-swr-react-hooks-remote-data-fetching/",
            "author": "Ibrahima Ndaw",
            "thumbnail": "https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG",
            "description": "SWR is a lightweight library created by Vercel (formerly ZEIT) that allows fetching, caching, or refetching data in realtime using React Hooks. It’s built with React Suspense which lets your components “wait” for something before they can render, including data. SWR ships also with great features such as dependent fetching, focus on revalidation, scroll position recovery, and so on. It’s also a very powerful tool since it’s backend agnostic and has good support for TypeScript.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/introduction-swr-react-hooks-remote-data-fetching/\">\n<title>An Introduction To SWR: React Hooks For Remote Data Fetching</title>\n<article><header><h1>An Introduction To SWR: React Hooks For Remote Data Fetching</h1>\n                  \n                    \n                    <address>Ibrahima Ndaw</address>\n                  \n                  <time datetime=\"2020-06-22T12:00:00+00:00\" class=\"op-published\">2020-06-22T12:00:00+00:00</time><time datetime=\"2020-06-22T12:00:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>SWR is a lightweight library created by Vercel (formerly ZEIT) that allows fetching, caching, or refetching data in realtime using React Hooks. It’s built with <a href=\"https://reactjs.org/docs/concurrent-mode-suspense.html\">React Suspense</a> which lets your components “wait” for something before they can render, including data. SWR ships also with great features such as dependent fetching, focus on revalidation, scroll position recovery, and so on. It’s also a very powerful tool since it’s backend agnostic and has good support for TypeScript. It’s a package that has a bright future.</p>\n\n<p>Why should you care? You should care if you’ve been looking for a library that does not only fetch data from APIs but also make it possible to do things like caching and dependent fetching. What will be covered in this tutorial will come in handy when building React applications with a lot of moving parts. It’s expected that you should have made use of Axios and the Fetch API, even though we’ll compare how they differ from SWR, we won’t be going into details on how they’ll be implemented.</p>\n\n<p>In this guide, I will introduce you to React Hooks for Remote Data Fetching by building a Pokedex app that requests data from the Pokemon API. We will also dive into other features that come with SWR as well, and highlight its differences compared to popular solutions such as the Fetch API and the Axios library and give you the reasons why using this library and why you should keep an eye on SWR.</p>\n\n<p>So, let’s start by answering a fundamental question: What is SWR?</p>\n\n\n  <div data-component=\"FeaturePanel\" data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container hidden\"></div>\n\n\n<h3>What Is SWR?</h3>\n\n<p>SWR is an initialism of stale-while-revalidate. It’s a React Hooks library for remote data fetching. SWR works with three main steps: first, it returns the data from the cache (the stale part), then sends the fetch request (the revalidate part), and finally comes with the up-to-date data. But no worries, SWR handles all these steps for us. The only thing we have to do is give the <code>useSWR</code> hook the needed parameters to make the request.</p>\n\n<p>SWR has also some nice features such as:</p>\n\n<ul>\n<li>Back-end agnostic</li>\n<li>Fast page navigation</li>\n<li>Revalidation on focus</li>\n<li>Interval polling</li>\n<li>Request deduplication</li>\n<li>Local mutation</li>\n<li>Pagination</li>\n<li>TypeScript ready</li>\n<li>SSR support</li>\n<li>Suspense mode</li>\n<li>React Native support</li>\n<li>Lightweight.</li>\n</ul>\n<p>Sounds magical? Well, SWR simplifies things and increases for sure the user experience of your React app. And once we start implementing it in our project, you will see why this hook is handy.</p>\n\n<p>It’s important to know that the name of the package is <code>swr</code> or SWR and the hook used to get SWR features is named <code>useSWR</code>.</p>\n\n<p>In theory, the SWR is maybe what you need to enhance your data fetching. However, we already have two great ways of making HTTP requests in our app: the Fetch API and the Axios library.</p>\n\n<p>So, why using a new library to retrieve data? let’s try answering this legit question in the next section.</p>\n\n<h3>Comparison With Fetch And Axios</h3>\n\n<p>We already have many ways to make HTTP requests in our React Apps, and two of the most popular is the Fetch API and the Axios library. They are both great and allows us to fetch or send data easily. However, once the operation is done, they will not help us to cache or paginate data, you have to do it on our own.</p>\n\n<p>Axios or Fetch will just handle the request and return the expected response, nothing more.</p>\n\n<p>And compared to SWR, it’s a bit different because the SWR under the hood uses the Fetch API to request data from the server — it’s kind of a layer built on top of it. However, it has some nice features such as caching, pagination, scroll position recovery, dependent fetching, etc, and to be precise a certain level of reactivity out of the box that Axios or Fetch do not have. It’s a big advantage because having such features help to make our React Apps fast and user-friendly and reduce markedly the size of our code.</p>\n\n<p>And to conclude, just keep in mind that SWR is not the same as Axios or Fetch even if it helps to deal with HTTP requests. SWR is more advanced than them, it provides some enhancements to keep our app synchronized with the back-end and hence increases the performance of our app.</p>\n\n<p>Now we know what’s differences SWR has compared to the Axios library or the Fetch API, it’s time to dive into why using such a tool.</p>\n\n<p><strong>Recommended reading</strong>: <em><a href=\"https://www.smashingmagazine.com/2020/06/rest-api-react-fetch-axios/\">Consuming REST APIs In React With Fetch And Axios</a></em></p>\n\n<h3>Why Using SWR For Data Fetching?</h3>\n\n<p>As I said earlier SWR ships with some handy features that help to increase the usability of your app easily. With SWR, you can paginate your data in no-time using <code>useSWRPages</code>, you can also fetch data that depends on another request or recover a scroll position when you get back to a given page, and so much more.</p>\n\n<p>Usually, we show to the user a loading message or a spinner while fetching data from the server. And with SWR, you can make it better by showing to the user the cached or stale data while retrieving new data from the API. And once that operation is done, it will revalidate the data to show the new version. And you don’t need to do anything, SWR will cache the data the first time you fetch it and retrieve it automatically when a new request is made.</p>\n\n<p>So far, we already see why using SWR over Axios or Fetch is better depending obviously on what you are aiming to build. But for many cases, I will recommend using SWR because it has great features that go beyond just fetching and returning data.</p>\n\n<p>That said, we can now start building our React app and use the SWR library to fetch remote data.</p>\n\n<p>So, let’s start by setting up a new project.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Setting Up</h3>\n\n<p>As I said earlier in the introduction, we will build an app that fetches data from the Pokemon API. You can use a different API if you want too, I will stick with it for now.</p>\n\n<p>And to create a new app, we need to run the following command on the terminal:</p>\n\n<pre><code class=\"language-bash\">npx create-react-app react-swr</code></pre>\n\n<p>Next, we need to install the SWR library by first navigating to the folder that holds the React app.</p>\n\n<pre><code class=\"language-bash\">cd react-swr</code></pre>\n\n<p>And run on the terminal the following command to install the SWR package.</p>\n\n<pre><code class=\"language-bash\">yarn add swr</code></pre>\n\n<p>Or if you’re using npm:</p>\n\n<pre><code class=\"language-bash\">npm install swr</code></pre>\n\n<p>Now we have all set up done, let’s structure the project as follow to start using SWR:</p>\n\n<pre><code class=\"language-bash\">src\n├── components\n|  └── Pokemon.js\n├── App.js\n├── App.test.js\n├── index.js\n├── serviceWorker.js\n├── setupTests.js\n├── package.json\n├── README.md\n├── yarn-error.log\n└── yarn.lock</code></pre>\n\n<p>As you can see, the folder structure is simple. The only thing to notice is the <code>components</code> folder that holds the <code>Pokemon.js</code> file. It will be used later as a presentational component to show a single Pokemon once we get data from the API.</p>\n\n<p>Great! With that in place, we can now start fetching data from the API using <code>useSWR</code>.</p>\n\n<h3>Fetching Remote Data</h3>\n\n<p>The SWR package has some handy features as we have seen above. However, there are two ways of configuring this library: either locally or globally.</p>\n\n<p>A local setup means that every time we create a new file, we have to setup SWR again to be able to fetch remote data. And a global setup allows us to reuse a part of our configuration within different files because a <code>fetcher</code> function can be declared once and used everywhere.</p>\n\n<p>And no worries, we will see both in this article, but for now, let’s get hands dirty and add some meaningful code in the <code>App.js</code> file.</p>\n\n<h4>Displaying The Data</h4>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport useSWR from 'swr'\nimport { Pokemon } from './components/Pokemon'\n\nconst url = 'https://pokeapi.co/api/v2/pokemon'\n\nconst fetcher = (...args) =&gt; fetch(...args).then((res) =&gt; res.json())\n\nfunction App() {\n    const { data: result, error } = useSWR(url, fetcher)\n\n    if (error) return &lt;h1&gt;Something went wrong!&lt;/h1&gt;\n    if (!result) return &lt;h1&gt;Loading...&lt;/h1&gt;\n\n    return (\n        &lt;main className='App'&gt;\n            &lt;h1&gt;Pokedex&lt;/h1&gt;\n            &lt;div&gt;\n                {result.results.map((pokemon) =&gt; (\n                    &lt;Pokemon key={pokemon.name} pokemon={pokemon} /&gt;\n                ))}\n            &lt;/div&gt;\n        &lt;/main&gt;\n    )\n}\nexport default App</code></pre>\n</div>\n\n<p>As you can see, we start by importing <code>useSWR</code> from the SWR library. This declares the URL of the API you want to get data from, and a function to fetch these data.</p>\n\n<p>The function <code>fetcher</code> is used here to transform the data into JSON. It receives the data fetched as an argument and returns something.</p>\n\n<p>Notice that here, I use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\">Rest</a> operator (<code>(...args)</code>) since I’m not sure of the type and length of data received as a parameter, therefore, I copy everything before passing it again as an argument to the <code>fetch</code> method provided by <code>useSWR</code> which transforms the data into JSON and returns it.</p>\n\n<p>That said, the <code>fetcher</code> and the <code>url</code> of the API can be now passed as parameters to the <code>useSWR</code> hook. With that, it can now make the request and it returns two states: the data fetched and an error state. And <code>data: result</code> is the same as <code>data.result</code>, we use object destructuring to pull <code>result</code> from <code>data</code>.</p>\n\n<p>With the returned values, we can now check if the data is successfully fetched and then loop through it. And for each user, use the Pokemon component to display it.</p>\n\n<p>Now we have the data and pass it down to the Pokemon Component, it’s time to update <code>Pokemon.js</code> to be able to receive and display the data.</p>\n\n<h4>Creating The Pokemon Component</h4>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport useSWR from 'swr'\n\nconst fetcher = (...args) =&gt; fetch(...args).then((res) =&gt; res.json())\n\nexport const Pokemon = ({ pokemon }) =&gt; {\n    const { name } = pokemon\n    const url = 'https://pokeapi.co/api/v2/pokemon/' + name\n\n    const { data, error } = useSWR(url, fetcher)\n\n    if (error) return &lt;h1&gt;Something went wrong!&lt;/h1&gt;\n    if (!data) return &lt;h1&gt;Loading...&lt;/h1&gt;\n\n    return (\n        &lt;div className='Card'&gt;\n            &lt;span className='Card--id'&gt;#{data.id}&lt;/span&gt;\n            &lt;img\n                className='Card--image'\n                src={data.sprites.front_default}\n                alt={name}\n            /&gt;\n            &lt;h1 className='Card--name'&gt;{name}&lt;/h1&gt;\n            &lt;span className='Card--details'&gt;\n                {data.types.map((poke) =&gt; poke.type.name).join(', ')}\n            &lt;/span&gt;\n        &lt;/div&gt;\n    )\n}</code></pre>\n</div>\n\n<p>Here, we have a component that receives a single Pokemon data from the API and displays it. However, the data received does not contain all fields needed, hence we have to make another request to the API to get the complete Pokemon object.</p>\n\n<p>And as you can see, we use the same process to retrieve the data even if this time we append the name of the Pokemon to the URL.</p>\n\n<p>By the way, if you are not familiar with destructuring, <code>({ pokemon })</code> is the same as receiving props and accessing to the pokemon object with <code>props.pokemon</code>. It’s just a shorthand to pull out values from objects or arrays.</p>\n\n<p>With that in place, if you navigate to the root folder of the project and run on the terminal the following command:</p>\n\n<pre><code class=\"language-bash\">yarn start</code></pre>\n\n<p>Or if you’re using npm:</p>\n\n<pre><code class=\"language-bash\">npm start</code></pre>\n\n<p>You should see that the data are successfully fetched from the Pokemon API and displayed as expected.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG\" sizes=\"100vw\" alt=\"fetching\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Fetching illustration. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78bb0682-3184-4c71-af4f-c7ab29634725/react-hooks-remote-data-fetching.PNG\">Large preview</a>)\n    </figcaption></figure><p>Great! We are now able to fetch remote data with SWR. However, this setup is a local one and can be a bit redundant because you can already see that <code>App.js</code> and <code>Pokemon.js</code> use the same fetcher function to do the same thing.</p>\n\n<p>But luckily, the package comes with a handy provider named <code>SWRConfig</code> that helps to configure SWR globally. It’s a wrapper component that allows child components to use the global configuration and therefore the fetcher function.</p>\n\n<p>To setup SWR globally, we need to update the <code>index.js</code> file because it’s where the App component is rendered using React DOM. If you want, you can use <code>SWRConfig</code> directly in the <code>App.js</code> file.</p>\n\n<h4>Configuring SWR Globally</h4>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { SWRConfig } from 'swr'\nimport App from './App'\nimport './index.css'\n\nconst fetcher = (...args) =&gt; fetch(...args).then((res) =&gt; res.json())\n\nReactDOM.render(\n    &lt;React.StrictMode&gt;\n        &lt;SWRConfig value={{ fetcher }}&gt;\n            &lt;App /&gt;\n        &lt;/SWRConfig&gt;\n    &lt;/React.StrictMode&gt;,\n    document.getElementById('root')\n)</code></pre>\n</div>\n  \n\n<p>As you can see, we start by importing <code>SWRConfig</code> which is a provider that needs to wrap the higher component or just part of your React app that needs to use SWR features. It takes as props a value that expects an object of config. You can pass more than one property to the config object, here I just need the function to fetch data.</p>\n\n<p>Now, instead of declaring the <code>fetcher</code> function in every file, we create it here and pass it as value to <code>SWRConfig</code>. With that, we can now retrieve data at any level in our app without creating another function and hence avoid redundancy.</p>\n\n<p>Besides that, <code>fetcher</code> is equal to <code>fetcher: fetcher</code>, it’s just syntactic sugar proposed by ES6. With that change, we need now to update our components to use the global config.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4>Using The Global SWR Config</h4>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport useSWR from 'swr'\nimport { Pokemon } from './components/Pokemon'\n\nconst url = 'https://pokeapi.co/api/v2/pokemon'\n\nfunction App() {\n    const { data: result, error } = useSWR(url)\n\n    if (error) return &lt;h1&gt;Something went wrong!&lt;/h1&gt;\n    if (!result) return &lt;h1&gt;Loading...&lt;/h1&gt;\n\n    return (\n        &lt;main className='App'&gt;\n            &lt;h1&gt;Pokedex&lt;/h1&gt;\n            &lt;div&gt;\n                {result.results.map((pokemon) =&gt; (\n                    &lt;Pokemon key={pokemon.name} pokemon={pokemon} /&gt;\n                ))}\n            &lt;/div&gt;\n        &lt;/main&gt;\n    )\n}\nexport default App</code></pre>\n</div>\n\n<p>Now we only need to pass the <code>url</code> to <code>useSWR</code>, instead of passing the <code>url</code> and <code>fetcher</code> method. Let’s also tweak the Pokemon component a bit.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport useSWR from 'swr'\n\nexport const Pokemon = ({ pokemon }) =&gt; {\n    const { name } = pokemon\n    const url = 'https://pokeapi.co/api/v2/pokemon/' + name\n\n    const { data, error } = useSWR(url)\n\n    if (error) return &lt;h1&gt;Something went wrong!&lt;/h1&gt;\n    if (!data) return &lt;h1&gt;Loading...&lt;/h1&gt;\n\n    return (\n        &lt;div className='Card'&gt;\n            &lt;span className='Card--id'&gt;#{data.id}&lt;/span&gt;\n            &lt;img\n                className='Card--image'\n                src={data.sprites.front_default}\n                alt={name}\n            /&gt;\n            &lt;h1 className='Card--name'&gt;{name}&lt;/h1&gt;\n            &lt;span className='Card--details'&gt;\n                {data.types.map((poke) =&gt; poke.type.name).join(', ')}\n            &lt;/span&gt;\n        &lt;/div&gt;\n    )\n}</code></pre>\n</div>\n\n<p>You can already see that we have no fetcher function anymore, thanks to the global configuration which passes the function to <code>useSWR</code> under the hood.</p>\n\n<p>Now, you can use the global fetcher function everywhere in your app. The only thing that the <code>useSWR</code> hook needs to fetch remote data is the URL.</p>\n\n<p>However, we can still enhance the setup furthermore by creating a custom hook to avoid declaring the URL again and again, and instead, just pass as parameter the path.</p>\n\n<h4>Advanced Setup By Creating A Custom Hook</h4>\n\n<p>To do so, you have to create a new file in the root of the project named <code>useRequest.js</code> (you can name it whatever you want) and add this code block below to it.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import useSwr from 'swr'\n\nconst baseUrl = 'https://pokeapi.co/api/v2'\n\nexport const useRequest = (path, name) =&gt; {\n    if (!path) {\n        throw new Error('Path is required')\n    }\n\n    const url = name ? baseUrl + path + '/' + name : baseUrl + path\n    const { data, error } = useSwr(url)\n\n    return { data, error }\n}</code></pre>\n</div>\n\n<p>Here, we have a function that receives a path and optionally a name and appends it to the base URL to build the complete URL. Next, it checks if a name parameter is received or not and handle it consequently.</p>\n\n<p>Then, that URL is passed as a parameter to the <code>useSWR</code> hook to be able to fetch the remote data and return it. And if no path is passed, it throws an error.</p>\n\n<p>Great! we need now to tweak the components a bit to use our custom hook.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport { useRequest } from './useRequest'\nimport './styles.css'\nimport { Pokemon } from './components/Pokemon'\n\nfunction App() {\n    const { data: result, error } = useRequest('/pokemon')\n\n    if (error) return &lt;h1&gt;Something went wrong!&lt;/h1&gt;\n    if (!result) return &lt;h1&gt;Loading...&lt;/h1&gt;\n\n    return (\n        &lt;main className='App'&gt;\n            &lt;h1&gt;Pokedex&lt;/h1&gt;\n            &lt;div&gt;\n                {result.results.map((pokemon) =&gt; (\n                    &lt;Pokemon key={pokemon.name} pokemon={pokemon} /&gt;\n                ))}\n            &lt;/div&gt;\n        &lt;/main&gt;\n    )\n}\nexport default App</code></pre>\n</div>\n\n<p>Now, instead of using the SWR hook, we use the custom hook built on top of it and then pass as expected the path as an argument. With that in place, everything will work like before but with a much cleaner and flexible configuration.</p>\n\n<p>Let’s also update the Pokemon component.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport { useRequest } from '../useRequest'\n\nexport const Pokemon = ({ pokemon }) =&gt; {\n    const { name } = pokemon\n    const { data, error } = useRequest('/pokemon', name)\n\n    if (error) return &lt;h1&gt;Something went wrong!&lt;/h1&gt;\n    if (!data) return &lt;h1&gt;Loading...&lt;/h1&gt;\n\n    return (\n        &lt;div className='Card'&gt;\n            &lt;span className='Card--id'&gt;#{data.id}&lt;/span&gt;\n            &lt;img\n                className='Card--image'\n                src={data.sprites.front_default}\n                alt={name}\n            /&gt;\n            &lt;h1 className='Card--name'&gt;{name}&lt;/h1&gt;\n            &lt;span className='Card--details'&gt;\n                {data.types.map((poke) =&gt; poke.type.name).join(', ')}\n            &lt;/span&gt;\n        &lt;/div&gt;\n    )\n}</code></pre>\n</div>\n\n<p>You can already see how our custom hook makes things easier and more flexible. Here, we just need to pass additionally the name of the Pokemon to fetch to <code>useRequest</code> and it handles everything for us.</p>\n\n<p>I hope you start enjoying this cool library — However, we still have things to discover because SWR offers so many features, and one of them is <code>useSWRPages</code> which is a hook to paginate data easily. So, let’s use that hook in the project.</p>\n\n<h4>Paginate Our Data With <code>useSWRPages</code>\n</h4>\n\n<p>SWR allows us to paginate data easily and request only a part of it, and when needed refetch data to show for the next page.</p>\n\n<p>Now, let’s create a new file in the root of the project <code>usePagination.js</code> and use it as a custom hook for pagination.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport useSWR, { useSWRPages } from 'swr'\nimport { Pokemon } from './components/Pokemon'\n\nexport const usePagination = (path) =&gt; {\n    const { pages, isLoadingMore, loadMore, isReachingEnd } = useSWRPages(\n        'pokemon-page',\n        ({ offset, withSWR }) =&gt; {\n            const url = offset || `https://pokeapi.co/api/v2${path}`\n            const { data: result, error } = withSWR(useSWR(url))\n\n            if (error) return &lt;h1&gt;Something went wrong!&lt;/h1&gt;\n            if (!result) return &lt;h1&gt;Loading...&lt;/h1&gt;\n\n            return result.results.map((pokemon) =&gt; (\n                &lt;Pokemon key={pokemon.name} pokemon={pokemon} /&gt;\n            ))\n        },\n        (SWR) =&gt; SWR.data.next,\n        []\n    )\n\n    return { pages, isLoadingMore, loadMore, isReachingEnd }\n}</code></pre>\n</div>\n\n<p>As you can see, here we start by importing <code>useSWRPages</code> which is the helper that allows paginating data easily. It receives 4 arguments: the key of the request <code>pokemon-page</code> which is also used for caching, a function to fetch the data that returns a component if the data are successfully retrieved, and another function that takes the <code>SWR</code> object and request data from the next page, and an array of dependencies.</p>\n\n<p>And once the data fetched, the function <code>useSWRPages</code> returns several values, but here we need 4 of them: the <code>pages</code> that is the component returned with the data, the function <code>isLoadingMore</code> which checks if the data are currently fetched, the function <code>loadMore</code> that helps fetching more data, and the method <code>isReachingEnd</code> which determines whether there is still data to retrieve or not.</p>\n\n<p>Now we have the custom hook that returns the needed values to paginate data, we can now move to the <code>App.js</code> file and tweak it a bit.</p>\n\n<div class=\"break-out\">\n<pre><code class=\"language-javascript\">import React from 'react'\nimport { usePagination } from './usePagination'\nimport './styles.css'\n\nexport default function App() {\n    const { pages, isLoadingMore, loadMore, isReachingEnd } = usePagination(\n        '/pokemon'\n    )\n\n    return (\n        &lt;main className='App'&gt;\n            &lt;h1&gt;Pokedex&lt;/h1&gt;\n            &lt;div&gt;{pages}&lt;/div&gt;\n            &lt;button\n                onClick={loadMore}\n                disabled={isLoadingMore || isReachingEnd}\n            &gt;\n                Load more...\n            &lt;/button&gt;\n        &lt;/main&gt;\n    )\n}</code></pre>\n</div>\n\n<p>Once the <code>usePagination</code> hook imported, we can now pass the path as a parameter and get back the returned values. And since <code>pages</code> is a component, we don’t need to loop through the data or anything like that.</p>\n\n<p>Next, we use the function <code>loadMore</code> on the button to fetch more data and disable it if the retrieving operation is not finished or if there is no data to fetch.</p>\n\n<p>Great! with that change, we can now browse on the root of the project and start the server with this command to preview our app.</p>\n\n<pre><code class=\"language-bash\">yarn start</code></pre>\n\n<p>Or if you’re using npm:</p>\n\n<pre><code class=\"language-bash\">npm start</code></pre>\n\n<p>You should see that the data are successfully fetched and if you click on the button, new data will be retrieved by SWR.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/485b517c-9f88-42fd-8c83-19dea358e9af/paginate-data.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/937d090d-2cf7-42d6-ad8e-97db79969a0d/paginate-data-800w.gif\" width=\"800\" height=\"\" alt=\"Pagination\"></a><figcaption>Pagination. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/485b517c-9f88-42fd-8c83-19dea358e9af/paginate-data.gif\">Large preview</a>)</figcaption></figure><p>So far, we have seen in practice the SWR library, and I hope you are finding value on it. However, it still has some features to offer. Let’s dive into these functionalities in the next section.</p>\n\n<h3>Other Features Of SWR</h3>\n\n<p>The SWR library has a bunch of handy things that simplifies the way we build React apps.</p>\n\n<h5>Focus Revalidation</h5>\n\n<p>It’s a feature that allows updating or revalidating to be precise the data when you re-focus a page or switch between tabs. And by default, this functionality is enabled, but you can disable it anyway if it does not fit your need. It can be useful especially if you have data with high-level-frequency updates.</p>\n\n<h5>Refetch on Interval</h5>\n\n<p>The SWR library allows refetching data after a certain amount of time. It can be handy when your data changes at high speed or you need to make a new request to get a piece of new information from your database.</p>\n\n<h5>Local Mutation</h5>\n\n<p>With SWR, you can set a temporary local state that will update automatically when new data are fetched(revalidation). This feature comes in play particularly when you deal with an Offline-first approach, it helps to update data easily.</p>\n\n<h5>Scroll Position Recovery</h5>\n\n<p>This feature is very handy, especially when it comes to dealing with huge lists. It allows you to recover the scroll position after getting back to the page. And in any case, it increases the usability of your app.</p>\n\n<h5>Dependent Fetching</h5>\n\n<p>SWR allows you to fetch data that depends on other data. That means it can fetch data A, and once that operation is done, it uses it to fetch data B while avoiding waterfalls. And this feature helps when you have relational data.</p>\n\n<p>That said, SWR helps to increase the user experience in any matter. It has more features than that, and for many cases it’s better to use it over the Fetch API or the Axios library.</p>\n\n<h3>Conclusion</h3>\n\n<p>Throughout this article, we have seen why SWR is an awesome library. It allows remote data fetching using React Hooks and helps to simplify some advanced features out of the box such as pagination, caching data, refetching on interval, scroll position recovery, and so on. SWR is also backend agnostic which means it can fetch data from any kind of APIs or databases. In definitive, SWR increases a lot the user experience of your React apps, it has a bright future and you should keep an eye on it or better use it in your next React app.</p>\n\n<p>You can preview the finished project live <a href=\"https://codesandbox.io/s/react-swr-e2vel\">here</a>.</p>\n\n<p>Thanks for reading!</p>\n\n<h4>Next Steps</h4>\n\n<p>You can go on to check the following links which will give you a better understanding beyond the scope of this tutorial.</p>\n\n<ul>\n<li><a href=\"https://github.com/zeit/swr\">SWR</a></li>\n<li><a href=\"https://swr.now.sh/\">SWR Docs</a></li>\n</ul>\n<h4>\n<span class=\"rh\">Further Reading</span> on SmashingMag:</h4>\n\n<ul>\n<li><a title=\"Read 'Styling Components In React'\" href=\"https://www.smashingmagazine.com/2020/05/styling-components-react/\" rel=\"bookmark\">Styling Components In React</a></li>\n    <li><a title=\"Read 'Better Reducers With Immer'\" href=\"https://www.smashingmagazine.com/2020/06/better-reducers-with-immer/\" rel=\"bookmark\">Better Reducers With Immer</a></li>\n    <li><a title=\"Read 'Higher-Order Components In React'\" href=\"https://www.smashingmagazine.com/2020/06/higher-order-components-react/\" rel=\"bookmark\">Higher-Order Components In React</a></li>\n    <li><a title=\"Read 'Building Reusable React Components Using Tailwind'\" href=\"https://www.smashingmagazine.com/2020/05/reusable-react-components-tailwind/\" rel=\"bookmark\">Building Reusable React Components Using Tailwind</a></li>\n</ul>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ks, ra, yk, il)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "A Monthly Update On All Things Smashing",
            "pubDate": "2020-06-19 18:00:00",
            "link": "https://www.smashingmagazine.com/2020/06/monthly-roundup-06-2020/",
            "guid": "https://www.smashingmagazine.com/2020/06/monthly-roundup-06-2020/",
            "author": "Iris Lješnjanin",
            "thumbnail": "https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ecf1aa1b-41d5-4edd-b499-250f900789b3/smashing-meets-june-2020.jpeg",
            "description": "The entire Smashing team has been doing its very best to bring you live sessions with real experts — people with practical experience who love to share what they have learned throughout their careers. We organized Smashing Meets on three days — events that were open to everyone in the web community. With sessions on performance, CSS, GraphQL, and creative courage, we made sure to leave plenty of time for Q&amp;A, networking, competitions and prizes.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/monthly-roundup-06-2020/\">\n<title>A Monthly Update On All Things Smashing</title>\n<article><header><h1>A Monthly Update On All Things Smashing</h1>\n                  \n                    \n                    <address>Iris Lješnjanin</address>\n                  \n                  <time datetime=\"2020-06-19T18:00:00+00:00\" class=\"op-published\">2020-06-19T18:00:00+00:00</time><time datetime=\"2020-06-19T18:00:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>The entire Smashing team has been doing its very best to bring you live sessions with real experts — people with practical experience who love to share what they have learned throughout their careers. We organized <em>Smashing Meets</em> on three days — events that were open to everyone in the web community. With sessions on performance, CSS, GraphQL, and creative courage, we made sure to leave plenty of time for Q&amp;A, networking, competitions and prizes.</p>\n\n<p>We’re overwhelmed with the feedback we’ve received since then; many of you seemed to mostly enjoy spending time with speakers, and asking questions directly. A huge <strong>thank you again to everyone who joined in</strong> — it was such an incredible experience to have shared with you all!</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://twitter.com/YiyingLu/status/1270831133798744066\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ecf1aa1b-41d5-4edd-b499-250f900789b3/smashing-meets-june-2020.jpeg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ecf1aa1b-41d5-4edd-b499-250f900789b3/smashing-meets-june-2020.jpeg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ecf1aa1b-41d5-4edd-b499-250f900789b3/smashing-meets-june-2020.jpeg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ecf1aa1b-41d5-4edd-b499-250f900789b3/smashing-meets-june-2020.jpeg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ecf1aa1b-41d5-4edd-b499-250f900789b3/smashing-meets-june-2020.jpeg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/ecf1aa1b-41d5-4edd-b499-250f900789b3/smashing-meets-june-2020.jpeg\" sizes=\"100vw\" alt=\"A still image of the Smashing Meets event that took place on June 9 2020 including Henri Helvetica, Yiying Lu and Vitaly Friedman\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Henri Helvetica, Yiying Lu and Vitaly Friedman live on screen at the recent Smashing Meets event. (Image credit: <a href=\"https://twitter.com/YiyingLu/status/1270831133798744066\">Yiying Lu</a>)\n    </figcaption></figure><h4>Smashing Meets Schedule Overview (May &amp; June)</h4>\n\n<table class=\"tablesaw table--no-stripe break-out table-saw\" data-tablesaw-mode=\"stack\" data-tablesaw-minimap><tbody>\n<tr>\n<td>May 18</td>\n      <td><a href=\"https://twitter.com/YiyingLu\">Yiying Lu</a></td>\n      <td>Creativity in Cross-Cultural Communication</td>\n      <td><a href=\"http://yiyinglu.com/smashingmag/SmashingMeets2020_yiyinglu.pdf\">Talk slides</a></td>\n      <td><a href=\"https://vimeo.com/423753402\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>May 18</td>\n      <td><a href=\"https://twitter.com/philhawksworth\">Phil Hawksworth</a></td>\n      <td>Building With JAMStack: Keeping UIs And APIs Aligned</td>\n      <td><a href=\"http://findthat.at/smashingjam\">Talk slides</a></td>\n      <td><a href=\"https://vimeo.com/422967299\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>May 18</td>\n      <td><a href=\"https://twitter.com/markboulton\">Mark Boulton</a></td>\n      <td>Accessible Typography</td>\n      <td><a href=\"https://www.dropbox.com/s/dnumihg83a7n9d2/accessible-typography.pdf?dl=0\">Talk slides</a></td>\n      <td><a href=\"https://vimeo.com/422938397\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>May 19</td>\n      <td><a href=\"https://twitter.com/Mandy_Kerr\">Mandy Michael</a></td>\n      <td>Fun With Browser and Sensor APIs</td>\n      <td><a href=\"https://www.smashingmagazine.com/articles/\">Talk slides</a></td>\n      <td><a href=\"https://vimeo.com/422976253\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>May 19</td>\n      <td><a href=\"https://twitter.com/rachelandrew\">Rachel Andrew</a></td>\n      <td>Hello, Subgrid!</td>\n      <td><a href=\"https://noti.st/rachelandrew\">Talk slides</a></td>\n      <td><a href=\"https://vimeo.com/422929734\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>May 19</td>\n      <td><a href=\"https://twitter.com/markboulton\">Mark Boulton</a></td>\n      <td>Accessible Typography</td>\n      <td><a href=\"https://www.dropbox.com/s/dnumihg83a7n9d2/accessible-typography.pdf?dl=0\">Talk slides</a></td>\n      <td><a href=\"https://vimeo.com/422984575\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>June 9</td>\n      <td><a href=\"https://twitter.com/HenriHelvetica\">Henri Helvetica</a></td>\n        <td>Moving Pictures: A Snap Shot of The Future Of Media</td>\n      <td>\n<a href=\"https://bit.ly/henri-movingpictures\">Talk Slides</a>\n        </td>\n<td><a href=\"https://vimeo.com/427915869\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>June 9</td>\n      <td><a href=\"https://twitter.com/rachelandrew\">Rachel Andrew</a></td>\n        <td>The Evolution of Responsive Design</td>\n      <td>\n<a href=\"https://noti.st/rachelandrew/Z60OtM/the-evolution-of-responsive-design\">Talk Slides</a>\n        </td>\n<td><a href=\"https://vimeo.com/427926740\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>June 9</td>\n      <td><a href=\"https://twitter.com/codebeast\">Christian Nwamba</a></td>\n        <td>GraphQL APIs for Frontend Developers</td>\n      <td>\n<a href=\"https://github.com/christiannwamba/graphql-api-for-frontend-dev-workshop\">Talk Slides</a>\n        </td>\n<td><a href=\"https://vimeo.com/427921097\">Watch video →</a></td>\n    </tr>\n<tr>\n<td>June 9</td>\n      <td><a href=\"https://twitter.com/YiyingLu\">Yiying Lu</a></td>\n        <td>Creative Courage</td>\n      <td>\n<a href=\"https://www.smashingmagazine.com/articles/\">Talk Slides</a>\n        </td>\n<td><a href=\"https://vimeo.com/429638127\">Watch video →</a></td>\n    </tr>\n</tbody></table>\n<h3>Smashing Online Workshops: Coming Up Next</h3>\n\n<p>Mark your calendars! We’ll be organizing <a href=\"https://smashingconf.com/\">even more online events</a> in the next weeks. Whether the spotlight shines on CSS, accessibility, performance or UX, we want to help you boost your skills and learn practical, actionable insights from experts in the industry.</p>\n\n<p>The previous workshops have been incredibly popular with many becoming sold out, so do check the details and save your spot as soon as you can.</p>\n\n<table class=\"tablesaw table--no-stripe break-out table-saw\" data-tablesaw-mode=\"stack\" data-tablesaw-minimap>\n<thead><tr>\n<th data-tablesaw-priority=\"persist\">Date</th>\n      <th>Name</th>\n      <th>Topic</th>\n    </tr></thead>\n<tbody>\n<tr>\n<td>July 2–17</td>\n      <td>Vitaly Friedman</td>\n      <td>Buy! The eCommerce UX Workshop</td>\n      <td><a href=\"https://smashingconf.com/online-workshops/workshops/vitaly-friedman-ecommerce/\">See details →</a></td>\n    </tr>\n<tr>\n<td>July 7–21</td>\n      <td>Brad Frost</td>\n      <td>Design Systems</td>\n      <td><a href=\"https://smashingconf.com/online-workshops/workshops/brad-frost-july\">See details →</a></td>\n    </tr>\n<tr>\n<td>August 17–31</td>\n      <td>Susan and Guthrie Weinschenk</td>\n      <td>Behavioral Design</td>\n      <td><a href=\"https://smashingconf.com/online-workshops/workshops/susan-guthrie-weinschenk\">See details →</a></td>\n    </tr>\n<tr>\n<td>August 20–Sept 4</td>\n      <td>Yiying Lu</td>\n      <td>Designing for a Global Audience</td>\n      <td><a href=\"https://smashingconf.com/online-workshops/workshops/yiying-lu/\">See details →</a></td>\n    </tr>\n<tr>\n<td>Sept 17–Oct 2</td>\n      <td>Natalia Tepluhina</td>\n      <td>Vue.js: The Practical Guide</td>\n      <td><a href=\"https://smashingconf.com/online-workshops/workshops/natalia-tepluhina/\">See details →</a></td>\n    </tr>\n</tbody>\n</table>\n<figure class=\"article__image\"><a href=\"https://smashingconf.com/\" title=\"Topple the Cat holding an ignited torch wearing trekking clothes ready for yet another adventure\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fa7f61ae-2c68-4387-8e5a-15ccd11f5e9c/boost-your-skills-at-home-banner.png\"></a><figcaption class=\"center\">Staying up to date can be so difficult. It’s a jungle out there, but we have you covered!<br><a href=\"https://smashingconf.com/\">See online events →</a></figcaption></figure><p>One last thing. In case you find yourself thinking twice about joining in a Smashing workshops just because you think your manager could need just a little bit more persuasion, then we’ve got your back with a neat lil’ template: <a href=\"https://smashingconf.com/online-workshops/convince-your-boss\">Convince Your Boss</a>. Good luck!</p>\n\n<h3>Our Latest Addition To The Smashing Books: Shipping Now</h3>\n\n<p>We’re so proud to have officially released Paul Boag’s book, “<a href=\"https://www.smashingmagazine.com/printed-books/click/\"><em>Click! How To Encourage Clicks Without Shady Tricks</em></a>”. It is a detailed guide on how to increase conversion and boost business KPIs without alienating customers along the way, and we’re sure you’ll find it tremendously useful.</p>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/encouraging-clicks-book-release/#toc\">Jump to table of contents</a> and <a href=\"http://provide.smashingmagazine.com/eBooks/click-sample-chapter.pdf?_ga=2.28886645.876622445.1592508395-1484040013.1592508395\">download a free PDF excerpt</a> (17.3 MB).</li>\n</ul>\n<figure class=\"\n  \n  \n  \"><a href=\"https://www.smashingmagazine.com/printed-books/click/\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/de7e1edc-2edc-4932-8126-af5d5e9de9df/smashing-book-click-outside-bkgd.jpeg 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/de7e1edc-2edc-4932-8126-af5d5e9de9df/smashing-book-click-outside-bkgd.jpeg 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/de7e1edc-2edc-4932-8126-af5d5e9de9df/smashing-book-click-outside-bkgd.jpeg 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/de7e1edc-2edc-4932-8126-af5d5e9de9df/smashing-book-click-outside-bkgd.jpeg 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/de7e1edc-2edc-4932-8126-af5d5e9de9df/smashing-book-click-outside-bkgd.jpeg 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/de7e1edc-2edc-4932-8126-af5d5e9de9df/smashing-book-click-outside-bkgd.jpeg\" sizes=\"100vw\" alt=\"A photograph of the hard copy of the latest Click! book written by Paul Boag\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Quality hardcover. Free worldwide shipping. 100 days money-back-guarantee. <a href=\"https://www.smashingmagazine.com/printed-books/click/\">Tell me more →</a>\n    </figcaption></figure><h3>Smashing Podcast: Tune In!</h3>\n\n<p><a href=\"https://www.smashingmagazine.com/category/smashing-podcast\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/fc99920c-0ece-4937-b84e-37aa3155c3b9/topple-headphones-smashing-podcast.png\" width=\"200\" alt=\"Smashing Podcast\"></a>18 episodes in, the <a href=\"https://www.smashingmagazine.com/category/smashing-podcast\">Smashing Podcast</a> has been better than we had ever expected! Every two weeks, <a href=\"https://twitter.com/drewm\">Drew McLellan</a> speaks to folks from different backgrounds, and there’s always so much to learn and share! You’re always welcome to <a href=\"https://podcast.smashingmagazine.com/?_ga=2.96002844.1607226577.1584014521-1113284200.1584014521\">tune in</a> and share your questions and thoughts with us anytime.</p>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/category/smashing-podcast\">Previous Smashing Podcast episodes</a> (including transcripts)</li>\n<li>Follow <a href=\"https://twitter.com/SmashingPod\">@SmashingPod</a> on Twitter</li>\n</ul>\n<h3>Trending Topics On Smashing Magazine</h3>\n\n<p>We publish a new article every day on various topics that are current in the web industry. Here are some that our readers seemed to enjoy the most and have recommended further:</p>\n\n<ul>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/06/equivalent-experiences-part2/\">Equivalent Experiences: Thinking Equivalently</a>,” <em>Eric Bailey</em>\n</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/06/user-interview-questions/\">12 Ways To Improve User Interview Questions</a>,” <em>Slava Shestopalov</em>\n</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/01/data-components-vue-js/\">How To Pass Data Between Components In Vue.js</a>,” <em>Matt Maribojoc</em>\n</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/01/introduction-react-context-api/\">An Introduction To React’s Context API</a>,” <em>Yusuff Faruq</em>\n</li>\n<li>“<a href=\"https://www.smashingmagazine.com/2020/06/test-design-concept-effectiveness/\">How To Test A Design Concept For Effectiveness</a>,” <em>Paul Boag</em>\n</li>\n</ul>\n<h3>Best Picks From Our Newsletter</h3>\n\n<p class=\"c-pre-sidenote--left\">We’ll be honest: Every second week, we struggle with keeping the <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">Smashing Newsletter</a> issues at a moderate length — there are just <em>so</em> many talented folks out there working on brilliant projects! Kudos to everyone involved!</p>\n<p class=\"c-sidenote c-sidenote--right\"><em>Interested in sponsoring? Feel free to check out our <a href=\"http://provide.smashingmagazine.com/SmashingMag_SmashingConf_Partnership_2020.pdf\">partnership options</a> and <a href=\"mailto:advertising@smashingmagazine.com\">get in touch</a> with the team anytime — they’ll be sure to get back to you right away.</em></p>\n\n<p><strong>P.S.</strong> <em>A huge thank you to <a href=\"https://www.smashingmagazine.com/author/cosima-mielke/\">Cosima Mielke</a> for writing and preparing these posts!</em></p>\n\n<h4>Modern CSS Solutions For Old CSS Problems</h4>\n\n<p>We all know that CSS can sometimes be tricky to master. Just think of the classic question of how to center a <code>div</code>. In “<a href=\"https://moderncss.dev/\">Modern CSS Solutions for Old CSS Problems</a>”, Stephanie Eckles explores solutions to those big and small CSS problems she has been solving in the last 13 years of being a front-end developer.</p>\n\n<figure><a title=\"Modern CSS Solutions\" href=\"https://moderncss.dev/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/3574ef06-e9ac-4d86-9732-e1e15b7f99db.png\" alt=\"Modern CSS Solutions\" border=\"0\"></a></figure><p>Apart from the old centering issue, the series explores challenges like creating elements of equal height, making dropdown menus accessible, styling buttons, and much more. Be sure to check back regularly as Stephanie keeps adding new topics. Brilliant!</p>\n\n<h4>Illustrations For Everyone</h4>\n\n<p>Illustrations are a great way to add a personal touch to a design. However, not everyone is a born illustrator and not every project has the budget to hire someone who masters the craft. During the lockdown, Pablo Stanley and a few of his friends decided to change that and created a tool that makes art more accessible and gives everyone the ability to use illustrations in their creations. Meet <a href=\"https://blush.design/\">Blush</a>.</p>\n\n<figure><a title=\"Blush\" href=\"https://blush.design/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/9afbd885-d27a-42f1-928b-834425bb2524.png\" alt=\"Blush\" border=\"0\"></a></figure><p>Blush is a collection of 13 mix-and-match illustration libraries created by artists from around the world. Whether it’s characters, cityscapes, plants, food, or a piece of abstract art, you can pick your favorite illustration from one of the packs and customize every little detail until you have the combination you need to tell your story. As Pablo puts it, it’s “like playing legos made of vectors”. The illustrations can be downloaded for free as high-quality PNGs. If you are an illustrator yourself and would like to make your work available to other makers, too, you can apply to get featured in Blush. A fantastic example of sharing and caring.</p>\n\n<h4>Learn Flexbox With Code Tidbits</h4>\n\n<p>You’ve always wanted to learn Flexbox but the whole undertaking seemed a bit, well, daunting? It doesn’t have to be. In fact, it might only take 30 code tidbits to get you on the path to mastering some Flexbox magic. Samantha Ming has got your back.</p>\n\n<figure><a title=\"Flexbox30\" href=\"https://www.samanthaming.com/flexbox30/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/053b7be2-f765-47dc-b76d-93ee7399c9fe.png\" alt=\"Flexbox30\" border=\"0\"></a></figure><p>In her free course <a href=\"https://www.samanthaming.com/flexbox30/\">Flexbox30</a>, Samantha takes you through 30 short and crisp Flexbox lessons. After learning the core concepts of Flexbox, you will explore the ins and outs of parent and child properties. Each lesson comes with a cheat sheet that you can download which makes the course also a great refresher if you already know your way around Flexbox but struggle with some of the properties.</p>\n\n<h4>Global Website Speed Profiler</h4>\n\n<p>Performance benchmarking tools usually measure performance form a single location. But how does your site perform for real-world users who aren’t based in that one location? To get more precise results for their own market, the folks behind the WordPress security plugin Wordfence built <a href=\"https://www.fastorslow.com/\"><em>Fast or Slow</em></a>, a tool that measures real-world performance from different locations around the world.</p>\n\n<figure><a title=\"Fast or Slow\" href=\"https://www.fastorslow.com/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/f8cb4fa3-3481-47a6-b582-8a876c581cb4.png\" alt=\"Fast or Slow\" border=\"0\"></a></figure><p><em>Fast or Slow</em> gets its data from a network of 13 servers in 13 cities around the world. Each server was calibrated to have the same performance so that the speed measurements give a true indication of what the site feels like to a real user. The performance test provides you with an overall score of a site’s performance and breaks the results further down by geographic location, while audits on CSS minification, image optimization, caching, and more help reveal specific performance bottlenecks. <em>Fast Or Slow</em> is free to use.</p>\n\n<h4>Sleek Browser Frames For Your Screenshots</h4>\n\n<p>With screenshots, there are usually two options: You take a screenshot of the entire browser window with browser extensions and maybe even bookmarks visible or, if you want something less distracting, you decide to only take a screenshot of the site without any border at all. If you’re looking for a more sophisticated solution, <a href=\"https://browserframe.com/\">Browserframe</a> might be for you.</p>\n\n<figure><a title=\"BrowserFrame\" href=\"https://browserframe.com/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/85fff03d-cd8d-44fa-8dd3-dd23b90c2483.png\" alt=\"BrowserFrame\" border=\"0\"></a></figure><p>Just drag and drop your screenshot into the tool, and it wraps it into a neat browser frame. There are multiple browsers, operating systems, and themes to choose from, and you can adjust the background color, shadow, padding, and some other details before you download the image. Perfect for blog posts, social media, slides, or wherever else you might want to use a screenshot.</p>\n\n<h4>SVG Path Data Syntax Explored</h4>\n\n<p>Do you know what the SVG path data syntax actually means? If not, you’re not alone. Mathieu Dutour has been working with SVGs for quite some time but always struggled to understand the path data structure. That’s why he built a visualizer for it.</p>\n\n<figure><a title=\"SVG Path Visualizer\" href=\"https://svg-path-visualizer.netlify.app/#M140%2020C73%2020%2020%2074%2020%20140c0%20135%20136%20170%20228%20303%2088-132%20229-173%20229-303%200-66-54-120-120-120-48%200-90%2028-109%2069-19-41-60-69-108-69z\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/553a0f51-24c1-4476-811b-af1a30fea6ad.png\" alt=\"SVG Path Visualizer\" border=\"0\"></a></figure><p>The <a href=\"https://svg-path-visualizer.netlify.app/#M140%2020C73%2020%2020%2074%2020%20140c0%20135%20136%20170%20228%20303%2088-132%20229-173%20229-303%200-66-54-120-120-120-48%200-90%2028-109%2069-19-41-60-69-108-69z\">SVG Path Visualizer</a> visualizes the SVG path data you enter and lets you discover all its different commands. There are also several examples you can explore to get more familiar with the syntax. An insightful look into the skeleton of an SVG.</p>\n\n<h4>The Future Is Here</h4>\n\n<p>Imagine you are working on a project and want to add a picture of a book to it. You have the book right beside you on your desk, so you take out your phone, take a picture of the book, send the picture to your computer, open it in Photoshop, remove the background, and, finally, include the picture in your file. Well, now what if you could copy and paste the book from reality onto your screen, just where you want it to be? What might sound like science fiction, is already possible today.</p>\n\n<figure><a title=\"The Future Is Here\" href=\"https://arcopypaste.app/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/55297737-f667-434c-81dc-114d2a5fd2e3.png\" alt=\"AR Copy Paste\" border=\"0\"></a></figure><p>The research prototype <a href=\"https://arcopypaste.app/\">AR Copy Paste</a> allows you to copy elements from your surroundings and paste them into an image editing software. Three independent modules make it happen: a mobile app, a local server that acts as the interface between the app and Photoshop and finds the correct position on your screen, and, last but not least, an objection detection/background removal service to cut the image into shape. An impressive peek at the future of AR.</p>\n\n<h4>Black Illustrations</h4>\n\n<p>Black people and people of color are often underrepresented in illustrations and visuals. To spark change in the digital landscape, the team at 5four created <a href=\"https://www.blackillustrations.com/\"><em>Black Illustrations</em></a>, illustration packs that paint a more diverse picture and show black people and people of color in a myriad of tasks.</p>\n\n<figure><a title=\"Black Illustrations\" href=\"https://www.blackillustrations.com/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/8d9a84c6-9ac3-4482-ae57-515d25047103.png\" alt=\"Black Illustrations\" border=\"0\"></a></figure><p>There are six illustration packs that can be used on websites, pitch decks, infographics, or anywhere you like. Two of the decks are free to download: “<a href=\"https://www.blackillustrations.com/packages/the-office-hustle-illustration-pack\">The Office Hustle</a>” shows people in an office environment, working from home, and having conversations, as well as in a healthcare setting, while “<a href=\"https://www.blackillustrations.com/packages/the-movement-pack-black-lives-matter\">The Movement Pack</a>” calls attention to #BlackLivesMatter and the fight against racial inequality. Other packs include education- and lifestyle-themed images. Beautiful designs with a powerful message.</p>\n\n<h4>See Easing Curves In Action</h4>\n\n<p>Movement in the real world is something fluid, no harsh or instant starts or stops, no constant speed. Easing curves help us bring that natural feel to motion on the web. However, in practice, they can be quite abstract to grasp, too.</p>\n\n<figure><a title=\"Easings\" href=\"https://easings.co/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/8819011e-fa32-4df2-acd4-0bb755191ffa.png\" alt=\"Easings\" border=\"0\"></a></figure><p>With <a href=\"https://easings.co/\"><em>Easings</em></a>, Paul Macgregor built a useful tool to visualize the effect common easing curves have on a range of interfaces — from a gallery carousel to a side menu, scroll jack, and modal. Just choose an easing curve from the collection to see it in action or enter a custom one. One for the bookmarks.</p>\n\n<h4>Insights Into How Developers Work Today</h4>\n\n<p>Since almost a decade, the yearly Developer Survey conducted by Stack Overflow is the largest survey of people who code. This year, they made it more representative of the diversity of programmers, asking 65,000 developers from around the world how they learn, which tools they use, and what they want. The survey was conducted in February and the <a href=\"https://insights.stackoverflow.com/survey/2020\">results offer a comprehensive look inside the community</a>.</p>\n\n<figure><a title=\"2020 Developer Survey\" href=\"https://insights.stackoverflow.com/survey/2020\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/43f28743-fe4c-47bf-820f-cf10b966d988.png\" alt=\"2020 Developer Survey\" border=\"0\"></a></figure><p>The survey covers the developers’ professional and demographical background, looks at tools and their popularity, what the respondents’ dev environments look like and how they learn and solve problems, just like at their career values, job priorities, and working conditions. Interesting insights guaranteed.</p>\n\n<h4>CSS Art In A Single Div</h4>\n\n<p>What can you do in a single <code>div</code>? Lynn Fisher has a lot of creative answers to this question, as her CSS drawing project <a href=\"https://a.singlediv.com/\"><em>A Single Div</em></a> shows.</p>\n\n<figure><a title=\"A Single Div\" href=\"https://a.singlediv.com/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/e84051b3-228d-420d-83a8-3e09226028d7.png\" alt=\"A Single Div\" border=\"0\"></a></figure><p>Every drawing is made up of CSS living inside a single <code>div</code> element and uses a combination of Pug for templating and Stylus for CSS preprocessing. From lettering and geometrical patterns to random objects and little characters, each colorful tile is a wonderful example of what can be accomplished with CSS.</p>\n\n<h4>A Magic Notebook For Exploring Data</h4>\n\n<p>Open source has transformed software development, making sharing, collaboration, and transparency the norm. Inspired by this, <a href=\"https://observablehq.com/\">Observable</a> aims at reimagining data science for a connected world. To make it more approachable, accessible, and social.</p>\n\n<figure><a title=\"Observable\" href=\"https://observablehq.com/\"><img src=\"https://mcusercontent.com/16b832d9ad4b28edf261f34df/images/36e4f161-4cf1-401d-9213-a18dc6302eb7.png\" alt=\"Observable\" border=\"0\"></a></figure><p>Described as a “magic notebook for exploring data and thinking with code”, Observable lets you sketch with live data. You can prototype visualizations, connect to Web APIs, and see your “notebook” update instantly when changes are made. Learning from one another, sharing and reusing components with a community of fellow authors is a key part of the concept, teams are even able to edit a notebook together in realtime. Now what to make with it? Reports, explanatory visualizations, UI prototypes, documentation, art projects, visual designs — only your imagination is the limit.</p>\n\n\n\t<div class=\"promo-newsletter--newsletter promo-newsletter--article\">\n    <div class=\"meow__content--inlined\">\n      \n\n<div class=\" promo-newsletter--newsletter\">\n\n<div class=\"promo-newsletter\">\n<div class=\"promo-newsletter-image-wrapper\">\n  <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\" class=\"promo-newsletter-image-link\">\n    <img src=\"https://www.smashingmagazine.com/images/smashing-cat/cat-with-slippers.svg\" width=\"180\" height=\"235\" loading=\"lazy\" class=\"promo-newsletter-image\" alt=\"With Smashing Newsletter, it always feels like home. A cat with slippers reading the newsletter edition.\"></a>\n</div>\n<h2 class=\"h2 promo-newsletter-title\">Smashing Newsletter</h2>\n<p class=\"promo-newsletter-description\">Every second Tuesday, we send a <a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">newsletter</a> with useful techniques on front-end and UX. Subscribe and get <strong>Smart Interface Design Checklists PDF</strong> in your inbox.</p>\n\n<div class=\"promo-newsletter-form-wrapper\">\n  <div class=\"nl__form-wrapper\">\n  \n    <div class=\"input-wrapper \">\n      <label for=\"email\" class=\"form__field js-form-field form__field--floating nl__form__content \">\n        <span class=\"form__field__label\">Your <span class=\"form__field__label--extra\">(smashing)</span> email</span>\n        </label>\n      <button data-event-category=\"Button\" data-event-action=\"click\" data-event-label=\"Newsletter Box\" type=\"submit\" class=\"btn btn--medium  btn--green btn--promo-newsletter   ladda-button ladda-button--fixed\" data-style=\"expand-right\" value=\"Submit\">\n        <span class=\"ladda-label\">\nSubscribe <span class=\"nl__form__arrow\">→</span>\n          <wbr></wbr></span>\n          <span class=\"ladda-spinner\"></span>\n        </button>\n      </div>\n    \n  </div>\n</div>\n\n  <small class=\"promo-newsletter-caption\">\n  Front-end, design and UX. Sent 2× a month. <br>You can always unsubscribe with just one click.</small>\n\n</div>\n</div>\n    </div>\n  </div>\n    \n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(cm, vf, ra)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "What Vitruvius Can Teach Us About Web Design",
            "pubDate": "2020-06-19 10:00:00",
            "link": "https://www.smashingmagazine.com/2020/06/vitruvius-web-design/",
            "guid": "https://www.smashingmagazine.com/2020/06/vitruvius-web-design/",
            "author": "Frederick O’Brien",
            "thumbnail": "https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png",
            "description": "There’s no escaping the ancient masters. Their shadows loom large over philosophy, literature, architecture, warfare, and… web design? Believe it or not, yes. Although Plato infamously omitted CSS Grid from from the final draft of The Republic, there is nonetheless plenty the old heads can teach us about web development.\nToday’s lecture is about architecture, and how some of its core tenets apply to the worldwide web. Architectural terms are not unusual in web development, and for good reason.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/vitruvius-web-design/\">\n<title>What Vitruvius Can Teach Us About Web Design</title>\n<article><header><h1>What Vitruvius Can Teach Us About Web Design</h1>\n                  \n                    \n                    <address>Frederick O’Brien</address>\n                  \n                  <time datetime=\"2020-06-19T10:00:00+00:00\" class=\"op-published\">2020-06-19T10:00:00+00:00</time><time datetime=\"2020-06-19T10:00:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>There’s no escaping the ancient masters. Their shadows loom large over philosophy, literature, architecture, warfare, and… web design? Believe it or not, yes. Although Plato infamously omitted <a href=\"https://www.smashingmagazine.com/2020/01/understanding-css-grid-container/\">CSS Grid</a> from from the final draft of <em>The Republic</em>, there is nonetheless plenty the old heads can teach us about web development.</p>\n\n<p>Today’s lecture is about architecture, and how some of its core tenets apply to the worldwide web. <a href=\"https://www.smashingmagazine.com/2020/01/split-personality-brutalist-web-development/\">Architectural terms are not unusual in web development</a>, and for good reason. In many ways, web developers are digital architects. This piece will focus on Vitruvius, a Roman architect, and how his principles can and should be applied to websites.</p>\n\n<p>This will focus in particular on the Vitruvian triad, three qualities essential to any building: durability (<em>firmitas</em>) , usefulness (<em>utilitas</em>), and beauty (<em>venustas</em>). Familiarity with these terms — and what they mean in practice — will help make your website better.</p>\n\n\n  <div data-component=\"FeaturePanel\" data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container hidden\"></div>\n\n\n<h3>Vitruvius</h3>\n\n<p>Marcus Vitruvius Pollio was a Roman architect, civil engineer, and author who lived during the first century BC. He is remembered mainly for his writings on architecture, <em>De architectura</em>. Addressing the then emperor Augustus, Vitruvius outlines his thoughts on architectural theory, history, and methods.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png\" sizes=\"100vw\" alt=\"Drawing of Roman architect Marcus Vitruvius Pollio\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Vitruvius posing for a LinkedIn headshot. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2f922161-b10d-4d56-80a9-65b98fe0d2ee/1-marcus-vitruvius-pollio.png\">Large preview</a>)\n    </figcaption></figure><p><em>De architectura</em> is the only treatise on architecture to survive from antiquity, and remains a design touchstone to this day. As you could probably guess, Leonardo da Vinci’s <em>Vitruvian Man</em> was inspired by Vitruvius’s writings about proportion.</p>\n\n<p>For those of you interested in going down an architecture rabbit hole, <a href=\"https://www.gutenberg.org/files/20239/20239-h/20239-h.htm#Page_69\">the full text of <em>De architecture</em> is available for free on Project Gutenberg</a>. This piece will not attempt to summarise the whole book. There are a couple of reasons for this. First, there’d be an awful lot to cover. Second, I haven’t totally lost sight of the fact this is a web design magazine. We will be honing in on the Vitruvian triad, a standard for design that applies well beyond architecture.</p>\n\n<p>The ancients had a knack for reducing topics to their bare — you might say elemental — essentials. The Vitruvian triad is one such case. There are other architects worth studying, other design theories worth being familiar with, but Vitruvius offers a particularly neat ABC that applies just as well to the web as it does to temples.</p>\n\n<h3>The Vitruvian Triad</h3>\n\n<p>In <em>De architectura</em>, Vitruvius identified three qualities essential to any piece of architecture. In the centuries since they have established themselves as his ‘golden rules.’ If you want to make Vitruvius happy — which of course you do — whenever you make a thing you should strive to make it:</p>\n\n<ul>\n<li>\n<strong>Useful</strong> <em>(utilitas)</em>\n</li>\n<li>\n<strong>Durable</strong> <em>(firmitas)</em>\n</li>\n<li>\n<strong>Beautiful</strong> <em>(venustas)</em>\n</li>\n</ul>\n<p>Designing with these three things in mind will elevate your work. Having one of these qualities is nice; having two is good; and having all three together is divine. Divine seems like the best option. Let’s break down what each of the three qualities mean in principle, then how they can be applied to web design.</p>\n\n<h4>Useful (utilitas)</h4>\n\n<h5>In principle</h5>\n\n<p>Buildings are designed and erected for a reason. Whatever that purpose is, it should always be an architect’s mind. If the structure does not meet its purpose then odds are it isn’t going to be very useful. A theatre with no stage has rather dropped the ball, for example.</p>\n\n<blockquote>According to Vitruvius, usefulness will be assured <strong>“when the arrangement of the apartments is faultless and presents no hindrance to use, and when each class of building is assigned to its suitable and appropriate exposure.”</strong>\n</blockquote>\n\n<p>You’ve heard this one before, albeit with different language. Vitruvius is the granddaddy of harping on about how <strong>form should follow function</strong>. Louis Sullivan, the ‘father of skyscrapers’, <a href=\"https://archive.org/details/tallofficebuildi00sull/page/n9/mode/2up/search/vitruvius\">coined that particular term in 1896</a>. Sullivan supposedly attributed the idea back to Vitruvius, although documentation of this is dubious. In any case, that’s what <em>utilitas</em> boils down to.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/206fb629-dc00-4db5-bb89-0bd26da7a6fa/2-old-public-library-of-cincinnati.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/206fb629-dc00-4db5-bb89-0bd26da7a6fa/2-old-public-library-of-cincinnati.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/206fb629-dc00-4db5-bb89-0bd26da7a6fa/2-old-public-library-of-cincinnati.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/206fb629-dc00-4db5-bb89-0bd26da7a6fa/2-old-public-library-of-cincinnati.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/206fb629-dc00-4db5-bb89-0bd26da7a6fa/2-old-public-library-of-cincinnati.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/206fb629-dc00-4db5-bb89-0bd26da7a6fa/2-old-public-library-of-cincinnati.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/206fb629-dc00-4db5-bb89-0bd26da7a6fa/2-old-public-library-of-cincinnati.png\" sizes=\"100vw\" alt=\"Photograph of the old Public Library of Cincinnati\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Purpose: Library. All clear? (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/206fb629-dc00-4db5-bb89-0bd26da7a6fa/2-old-public-library-of-cincinnati.png\">Large preview</a>)\n    </figcaption></figure><p>Different types of buildings have different requirements. A building designed with these requirements as an afterthought will likely disappoint. This may sound obvious, but there are enough white elephants in this world to warrant caution. <a href=\"https://99percentinvisible.org/episode/stop-that-bus/?utm_medium=website&amp;utm_source=archdaily.com\">Labyrinthine shopping centres</a> and <a href=\"https://abc7ny.com/archive/7373613/\">highly conductive metal domes in playgrounds</a> may look cool in investor presentations, but they don’t wind up being terribly useful.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbf610e5-f9ce-40f9-ab42-61b9260640b5/3-playground-domes-news-story.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbf610e5-f9ce-40f9-ab42-61b9260640b5/3-playground-domes-news-story.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbf610e5-f9ce-40f9-ab42-61b9260640b5/3-playground-domes-news-story.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbf610e5-f9ce-40f9-ab42-61b9260640b5/3-playground-domes-news-story.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbf610e5-f9ce-40f9-ab42-61b9260640b5/3-playground-domes-news-story.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbf610e5-f9ce-40f9-ab42-61b9260640b5/3-playground-domes-news-story.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbf610e5-f9ce-40f9-ab42-61b9260640b5/3-playground-domes-news-story.png\" sizes=\"100vw\" alt=\"Screenshot of New York Times news article about a playground lawsuit\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Don’t be the playground designer whose playground gives children second-degree burns. Full story in <a href=\"https://cityroom.blogs.nytimes.com/2012/10/25/park-group-settles-suit-claiming-playground-equipment-was-too-hot/\">The New York Times</a>. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/bbf610e5-f9ce-40f9-ab42-61b9260640b5/3-playground-domes-news-story.png\">Large preview</a>)\n    </figcaption></figure><p>This also means the individual parts of a structure should be logically connected. In other words, they should be simple to access and navigate. If a building is useful and easy to use that’s a very good start.</p>\n\n<h5>Online</h5>\n\n<p><em>Utilitas</em> also applies to web design. Every website has a purpose. That purpose may be practical, like a search engine or weather forecast, or it may be artistic, like an interactive story or graphic design portfolio. Whatever it is, it has a reason to exist, and if it is designed with that reason in mind it is more likely to be useful to anyone who visits the site.</p>\n\n<blockquote class=\"twitter-tweet\">\n<p lang=\"en\" dir=\"ltr\">Content precedes design. Design in the absence of content is not design, it's decoration.</p>— zeldman (@zeldman) <a href=\"https://twitter.com/zeldman/status/804159148?ref_src=twsrc%5Etfw\">May 5, 2008</a>\n</blockquote> <p>An encyclopedia you would expect to be easy to search and navigate, with cleanly presented and properly cited information. Wikipedia, for example, ticks all of those boxes. It is the web equivalent of an enormous library, right down to the obscure sections and staff bickering behind the scenes. It was built with usefulness front and center, and so its core design has remained consistent in the years since its founding.</p>\n\n<p>Alternatively, the purpose of a publication is to produce original content that is of value or interest to its readers. To be useful, a website’s publication would present said content in a vibrant and direct way, paying special attention to the reading experience across various devices. A website with wonderful content and bad design undermines its own usefulness.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78b135de-27ed-4579-a0b3-82ec91a6a6b3/4-the-guardian-homepage.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78b135de-27ed-4579-a0b3-82ec91a6a6b3/4-the-guardian-homepage.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78b135de-27ed-4579-a0b3-82ec91a6a6b3/4-the-guardian-homepage.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78b135de-27ed-4579-a0b3-82ec91a6a6b3/4-the-guardian-homepage.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78b135de-27ed-4579-a0b3-82ec91a6a6b3/4-the-guardian-homepage.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78b135de-27ed-4579-a0b3-82ec91a6a6b3/4-the-guardian-homepage.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78b135de-27ed-4579-a0b3-82ec91a6a6b3/4-the-guardian-homepage.png\" sizes=\"100vw\" alt=\"Homepage screenshot of The Guardian newspaper\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\"><em>The Guardian</em> is a newspaper. It’s purpose is to report the news. Its award-winning website doesn’t faff around with slogans or spectacle; it packs it full of content. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/78b135de-27ed-4579-a0b3-82ec91a6a6b3/4-the-guardian-homepage.png\">Large preview</a>)\n    </figcaption></figure><p>A clear purpose leads to clear design. If a purpose has you pulling in several different directions then the same will be true of the website. You can’t be all things to all people, and it is pointless to try. Usefulness tends to meet specific needs, not all needs.</p>\n\n<p>When it comes to usefulness you can’t afford to treat websites as something abstract. Like buildings, websites are visited and used by people, and ought to be designed with them in mind above all others. Investors, advertisers, and all the other sordid actors will have their time, but if you let them in too early a site’s usefulness will be compromised. When a publication breaks up articles across multiple pages purely to inflate traffic numbers, its usefulness is reduced. When an e-commerce platform seems more concerned with shoving you down conversion funnels than with providing honest information about its products, its usefulness is reduced. In such cases, the purpose has become secondary, and the design suffers as a result.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa52830-1e21-4acf-8904-1d7f936f8eb3/5-duckduckgo-homepage.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa52830-1e21-4acf-8904-1d7f936f8eb3/5-duckduckgo-homepage.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa52830-1e21-4acf-8904-1d7f936f8eb3/5-duckduckgo-homepage.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa52830-1e21-4acf-8904-1d7f936f8eb3/5-duckduckgo-homepage.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa52830-1e21-4acf-8904-1d7f936f8eb3/5-duckduckgo-homepage.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa52830-1e21-4acf-8904-1d7f936f8eb3/5-duckduckgo-homepage.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa52830-1e21-4acf-8904-1d7f936f8eb3/5-duckduckgo-homepage.png\" sizes=\"100vw\" alt=\"Homepage screenshot of the DuckDuckGo search engine\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      We recognise the hallmarks of search engine design just like we recognise theatres, libraries, or sport stadiums. Their forms are shaped around their function. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/cfa52830-1e21-4acf-8904-1d7f936f8eb3/5-duckduckgo-homepage.png\">Large preview</a>)\n    </figcaption></figure><p>Also, like buildings, websites should be easy to navigate. Ensuring the usefulness of a website requires thorough planning. Where the architect has floor plans and models, the web developer has sitemaps, wireframes, and more. These allow us to identify layout problems early and address them.</p>\n\n<p>Looking at the design through different lenses is especially important here. Does the palette account for colour blindness and cultural differences? <a href=\"https://www.shutterstock.com/blog/color-symbolism-and-meanings-around-the-world\">Colours mean different things in different places</a>, after all. Is it easy to browse using <a href=\"https://www.smashingmagazine.com/2018/07/web-with-just-a-keyboard/\">keyboards</a> and <a href=\"https://www.smashingmagazine.com/2018/12/voiceover-screen-reader-web-apps/\">screen readers</a>? Not everyone navigates the web the same way you do. Surely it’s better to be useful to as many people as possible? There is no good excuse for websites not to be both <a href=\"https://www.smashingmagazine.com/2018/04/designing-accessibility-inclusion/\">accessible and inclusive</a>.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4>Durable (firmitas)</h4>\n\n<h5>In principle</h5>\n\n<p><em>Firmitas</em> boils down to the idea that things should be built to last. A fantastically useful structure that topples over after a couple of years would be widely regarded as a failure. A well-made building can last for centuries, even millenniums. Ironically, none of Vitruvius’s own buildings survive, but the point still stands.</p>\n\n<p>This principle encompasses more aspects of architecture than might immediately come to mind.</p>\n\n<blockquote>Durability will be assured when foundations are carried down to the solid ground and materials wisely and liberally selected.<br>— Vitruvius</blockquote>\n\n<p>In other words, choose your destination carefully, lay deep foundations, and use appropriate materials.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d25725a-d7ef-4747-ac55-463618364630/6-the-great-wall-of-china.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d25725a-d7ef-4747-ac55-463618364630/6-the-great-wall-of-china.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d25725a-d7ef-4747-ac55-463618364630/6-the-great-wall-of-china.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d25725a-d7ef-4747-ac55-463618364630/6-the-great-wall-of-china.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d25725a-d7ef-4747-ac55-463618364630/6-the-great-wall-of-china.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d25725a-d7ef-4747-ac55-463618364630/6-the-great-wall-of-china.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d25725a-d7ef-4747-ac55-463618364630/6-the-great-wall-of-china.png\" sizes=\"100vw\" alt=\"Photograph of the Great Wall of China\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      With some sections well over 2,000 years old, it’s safe to say the Great Wall of China was built to last. Photograph by <a href=\"https://unsplash.com/@whatyouhide\">Andrea Leopardi</a>. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/5d25725a-d7ef-4747-ac55-463618364630/6-the-great-wall-of-china.png\">Large preview</a>)\n    </figcaption></figure><p>We all instinctively understand longevity is a mark of good design. It reflects quality materials, meticulous planning, and loving maintenance. The Pantheon in Rome, or the Great Wall of China, are testaments to durable design, renowned as much for their longevity as for their majesty.</p>\n\n<p>The principle also concerns environmental factors. Are buildings designed with due thought to the strains of weather, earthquakes, erosion, etc.? If not, it may not be a building for long...</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773ddd52-676a-428c-b702-7e68dc9e54c1/7-tacoma-narrows-bridge.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/773ddd52-676a-428c-b702-7e68dc9e54c1/7-tacoma-narrows-bridge.gif\" width=\"415\" height=\"324\" alt=\"Footage of the Tacoma Narrows Bridge shortly before its collapse\"></a><figcaption>The Tacoma Narrows Bridge has its durability put to the test after engineers cut corners on cost. Spoiler: it collapsed.</figcaption></figure><p>It’s reassuring to know you can count on a structure not collapsing for a while, and in the long run, it usually winds up being cheaper. A durable building sits on strong foundations and uses materials appropriate to its purpose and its environment. Buildings that aren’t designed to last are typically glorified film sets. Before long, they are rubble.</p>\n\n<h5>Online</h5>\n\n<p>Time seems to pass much faster on the web, but the principle of <em>firmitas</em> still applies. Given the endless turbulence of online life it makes sense to plant your flag in something sturdy. Out of the three qualities, it is the one least visible to users, but without it, everything else would fall apart.</p>\n\n<p>This starts with under the hood considerations. The foundations must be strong. Where will the website go? Is the content management system the right fit? Can your web hosting provider handle the expected traffic (and more) and still run smoothly? As anyone who has migrated from one CMS to another can tell you, it’s worth getting it right the first time if possible.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3caf0559-ccd3-43fd-9c31-85abfed76d57/8-server-down.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3caf0559-ccd3-43fd-9c31-85abfed76d57/8-server-down.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3caf0559-ccd3-43fd-9c31-85abfed76d57/8-server-down.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3caf0559-ccd3-43fd-9c31-85abfed76d57/8-server-down.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3caf0559-ccd3-43fd-9c31-85abfed76d57/8-server-down.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3caf0559-ccd3-43fd-9c31-85abfed76d57/8-server-down.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3caf0559-ccd3-43fd-9c31-85abfed76d57/8-server-down.png\" sizes=\"100vw\" alt=\"A generic error message for websites with server issues\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      This is what a crumbling website looks like. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/3caf0559-ccd3-43fd-9c31-85abfed76d57/8-server-down.png\">Large preview</a>)\n    </figcaption></figure><p>There is also the longevity of the web technologies you’re using. New frameworks may seem like a good idea at the time, but if a site needs to be around for years it may make sense to fall back on HTML, CSS, and JavaScript, as well as universally supported SEO markups like structured data. As in architecture, building things to last often means using established materials rather than newfangled ones.</p> \n\n<p>Durability extends to design. Web pages have to bend and stretch and warp in ways that would make architects weep. A responsive website is a durable website. As new devices — <a href=\"https://www.smashingmagazine.com/2020/02/foldable-web-meaning/\">foldables, for example</a> — and markups enter come at us, websites need to be able to take them in stride. Architects don’t get to cross their arms and sulk about earthquakes, so why should web designers shy away from the hazards of the web? Great design faces up to environmental challenges; it doesn't avoid them.</p>\n\n<p>As a site grows its users will become familiar with its design. The more that happens the more of a headache it is to make wholesale changes. If a site is designed carefully from the start then renovations are more likely than rebuilds, and the appearance remains familiar even when it is updated. In this sense, a site’s durability is helped immeasurably by clear purpose. That in itself is a kind of bedrock, helping to keep sites sturdy in times of change. Even the best sites need updates from time to time.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ecef2ac-163b-4ba2-8731-ff3edcf8a3e0/9-smashing-magazine.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ecef2ac-163b-4ba2-8731-ff3edcf8a3e0/9-smashing-magazine.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ecef2ac-163b-4ba2-8731-ff3edcf8a3e0/9-smashing-magazine.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ecef2ac-163b-4ba2-8731-ff3edcf8a3e0/9-smashing-magazine.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ecef2ac-163b-4ba2-8731-ff3edcf8a3e0/9-smashing-magazine.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ecef2ac-163b-4ba2-8731-ff3edcf8a3e0/9-smashing-magazine.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ecef2ac-163b-4ba2-8731-ff3edcf8a3e0/9-smashing-magazine.png\" sizes=\"100vw\" alt=\"Homepage screenshot of Smashing Magazine website\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Smashing Magazine’s <a href=\"https://www.smashingmagazine.com/2017/03/a-little-surprise-is-waiting-for-you-here/\">2017 redesign</a> solidified behind the scenes elements like content management, job boards, and ecommerce while keeping the front-end character familiar. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/0ecef2ac-163b-4ba2-8731-ff3edcf8a3e0/9-smashing-magazine.png\">Large preview</a>)\n    </figcaption></figure><p>There is also the question of sustainability. Is due attention being paid to the commercial realities of the site? In other words, where is the box office? Be it paywalls, advertising, or membership systems, there’s no shame in incorporating these into the design process. They are not a site’s purpose, but they help make it durable.</p>\n\n<h4>Beautiful (venustas)</h4>\n\n<h5>In principle</h5>\n\n<p>As Vitruvius says, “the eye is always in search of beauty.” It is a perfectly legitimate quality to aim for.</p>\n\n<blockquote>According to <em>De architectura</em>, beauty occurs <strong>“when the appearance of the work is pleasing and in good taste, and when its members are in due proportion according to correct principles of symmetry.”</strong>\n</blockquote>\n\n<p>As well as being useful and well made, buildings ought also to be pleasing to the eye. Some may even touch the heart.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d193db8-6947-4e69-ab1d-f2c7f2143eed/10-vitruvius-illustration.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d193db8-6947-4e69-ab1d-f2c7f2143eed/10-vitruvius-illustration.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d193db8-6947-4e69-ab1d-f2c7f2143eed/10-vitruvius-illustration.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d193db8-6947-4e69-ab1d-f2c7f2143eed/10-vitruvius-illustration.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d193db8-6947-4e69-ab1d-f2c7f2143eed/10-vitruvius-illustration.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d193db8-6947-4e69-ab1d-f2c7f2143eed/10-vitruvius-illustration.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d193db8-6947-4e69-ab1d-f2c7f2143eed/10-vitruvius-illustration.png\" sizes=\"100vw\" alt=\"An illustration for Vitruvius’s writings on architecture\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      If you want to design a good temple, Vitruvius is useful for that, too. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1d193db8-6947-4e69-ab1d-f2c7f2143eed/10-vitruvius-illustration.png\">Large preview</a>)\n    </figcaption></figure><p>Vitruvius outlines several qualities that help make buildings beautiful. Symmetry and proportion were of particular interest to him (hence Da Vinci’s <em>Vitruvuian Man</em>). Obsessively incorporating shapes into everything predates graphic design by a few millennia.</p>\n\n<p>Each element of a structure should be considered in relation to others near it, as well as to the environment that it is being built. Vitruvius sums up this interplay with one word: eurythmy, a Greek term for harmonious rhythm. (British pop duo Eurythmics drew their name from the same term, in case you were wondering.) Vitruvius defines it in an architectural context as follows:</p>\n\n<blockquote>Eurythmy is beauty and fitness in the adjustments of the members. This is found when the members of a work are of a height suited to their breadth, of a breadth suited to their length, and, in a word, when they all correspond symmetrically.</blockquote>\n\n<p>Like music, buildings have rhythm; their individual pieces forming into a kind of harmony. A beautiful building might be the carved marble equivalent of a Beach Boys chorus, while an ugly one is like nails on a chalkboard.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1030e0e6-cbc4-48f2-9034-c84243dc6d97/11-mcmansion-hell.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1030e0e6-cbc4-48f2-9034-c84243dc6d97/11-mcmansion-hell.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1030e0e6-cbc4-48f2-9034-c84243dc6d97/11-mcmansion-hell.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1030e0e6-cbc4-48f2-9034-c84243dc6d97/11-mcmansion-hell.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1030e0e6-cbc4-48f2-9034-c84243dc6d97/11-mcmansion-hell.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1030e0e6-cbc4-48f2-9034-c84243dc6d97/11-mcmansion-hell.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1030e0e6-cbc4-48f2-9034-c84243dc6d97/11-mcmansion-hell.png\" sizes=\"100vw\" alt=\"An example of McMansion Hell critiquing shoddy architecture\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      For those curious what beautiful architecture doesn’t look like, <a href=\"https://mcmansionhell.com/\">McMansion Hell</a> is a good place to start. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/1030e0e6-cbc4-48f2-9034-c84243dc6d97/11-mcmansion-hell.png\">Large preview</a>)\n    </figcaption></figure><p>As well as being well proportioned and symmetrical, individual pieces can enhance beauty in other ways. Good craftsmanship is beautiful, as is attention to detail. Materials appropriate to the structure are also beautiful — reflecting the sound judgment and good taste of the designer.</p>\n\n<p>Ornamentation is acceptable, but it must complement the core design of the structure — think column engravings, paving patterns, etc. All these little details and considerations amount to the building as a whole. When they all fall together, it’s breathtaking.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h5>Online</h5>\n\n<p>Beautiful websites adhere to many of the same standards as architecture. Proportion and symmetry are mainstays of attractive design. Grid systems serve the same purpose of organizing content clearly and attractively. Beyond that, there are questions of color, typography, imagery, and more, all of which feed into a website’s beauty — or lack thereof.</p>\n\n<p>To get the ball rolling, here are a handful of resources on <em>Smashing Magazine</em> alone:</p>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2010/01/color-theory-for-designers-part-1-the-meaning-of-color/\">‘Colour Theory For Designers’</a> by Cameron Chapman</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2017/07/advanced-color-palettes-photoshop-sketch-affinity-designer/\">‘Taming Advanced Color Palettes In Photoshop, Sketch And Affinity Designer’</a> by Marc Edwards</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2014/12/the-good-the-bad-and-the-great-examples-of-web-typography/\">‘The Good, The Bad, And The Great Examples Of Web Typography’</a> by Jeremiah Shoaf</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2019/12/brand-illustration-systems-visual-identity/\">‘Brand Illustration Systems: Drawing A Strong Visual Identity’</a> by Yihui Liu</li>\n<li>Andy Clarke’s <a href=\"https://www.smashingmagazine.com/2020/04/inspired-design-decisions-herb-lubalin/\">Inspired Design Decisions series</a>.</li>\n</ul>\n<p>An aspect of venustas that is especially relevant to web design is how users can interact with it. As well as being nice to look at, websites have the potential to be playful, even surprising. It’s one thing to sit there and be admired, it’s another to invite visitors to become part of the beauty.</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n    break-out article__image\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33e81f68-de02-44b0-b8ba-f18c887d126c/12-bruno-simon-portfolio-website.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33e81f68-de02-44b0-b8ba-f18c887d126c/12-bruno-simon-portfolio-website.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33e81f68-de02-44b0-b8ba-f18c887d126c/12-bruno-simon-portfolio-website.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33e81f68-de02-44b0-b8ba-f18c887d126c/12-bruno-simon-portfolio-website.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33e81f68-de02-44b0-b8ba-f18c887d126c/12-bruno-simon-portfolio-website.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33e81f68-de02-44b0-b8ba-f18c887d126c/12-bruno-simon-portfolio-website.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33e81f68-de02-44b0-b8ba-f18c887d126c/12-bruno-simon-portfolio-website.png\" sizes=\"100vw\" alt=\"Screenshot of Bruno Simon’s portfolio website\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\"><a href=\"https://bruno-simon.com/\">Bruno Simon’s portfolio website</a> invites visitors to drive around using their arrow keys. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/33e81f68-de02-44b0-b8ba-f18c887d126c/12-bruno-simon-portfolio-website.png\">Large preview</a>)\n    </figcaption></figure><p>Google’s interactive doodles are another good — and less daunting — example of this. Covering all manner of subjects, they invite users to play games, to learn, and to be entertained. It’s nice in its own right, and aligns with Google’s purpose as a source of information.</p>\n\n<figure><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e601f482-6c65-4ff8-b07c-4bf92ae7b37c/13-google-doogle-800w.gif\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/e601f482-6c65-4ff8-b07c-4bf92ae7b37c/13-google-doogle-800w.gif\" width=\"800\" height=\"\" alt=\"Example of a Google Doodle\"></a><figcaption>Ironically, this is just a GIF of an interactive thing rather than the interactive thing itself, but you can see the full doodle and details of its making <a href=\"https://www.google.com/doodles/44th-anniversary-of-the-birth-of-hip-hop\">here</a>. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/65834fef-8843-4fcd-8e0c-6b7bc2763480/13-google-doogle.gif\">Large preview</a>)</figcaption></figure><p>With the web continuing its shift towards mobile-first experience, in which users can literally touch the websites they visit, it should be remembered that beauty pertains to all the senses — not just sight.</p>\n\n<p>As for the ‘environment’, with web design that is the device it is being displayed on. Unlike buildings, websites don’t have the luxury of being one shape at all times. To be beautiful they must be responsive, shifting size and proportion to compliment the device. This is pleasing on its own, and done well the shape shifting itself becomes beautiful in its own way.</p>\n<p>\n\n</p>\n<h4>A Balancing Act</h4>\n\n<p>Vitruvius’s rules of <em>utilitas</em>, <em>firmitas</em>, and <em>venustas</em> have endured because they work, and they have endured as a triad because they work best together. Attaining all three is a balancing act. If they pull in different directions then the quality of whatever is being made will suffer. <a href=\"https://www.smashingmagazine.com/2010/11/showcase-of-beautiful-but-unusable-websites/\">Beautiful but unuseable</a> is poor design, for example. On the flip side, when they work together the result can be far greater than the sum of their parts.</p>\n\n<p>As with architecture this requires a bird's eye view. The pieces cannot be done one at a time, they must be done with the others in mind.</p>\n\n<blockquote>The architect, as soon as he has formed the conception, and before he begins the work, has a definite idea of the beauty, the convenience, and the propriety that will distinguish it.<br>— Vitruviuas</blockquote>\n\n<p>No doubt the details will change, but the harmony should not.</p>\n\n<p>This extends to the people making a website. As with architecture websites typically have to balance the wants of a client, an architect, and a builder — not to mention investors, financiers, statisticians, and so on. For a website to be harmonious, so do the people responsible for building it.</p>\n\n<p>None of this is to say that the three qualities are equally important regardless of the project — only that each should be given due thought in relation to the others. The usefulness of the Eiffel Tower seems fairly trivial, as does the beauty of the Hoover Dam, and that’s fine. If a website is made to be ornamental or temporary, it doesn’t have to be more than that. The natures of <em>utilitas</em>, <em>firmitas</em>, and <em>venustas</em> themselves change depending on the project. Like most rules worth following, don’t be afraid to bend — or even break — them when the mood takes you.</p>\n\n<h3>My Website Is A Temple</h3>\n\n<p>Web developers are the architects of the Internet, and websites are their buildings. Vitruvius makes a point of saying architects are not — and indeed cannot be — experts in every field. Instead, they are jacks of all trades (my phrasing, not his). For the triad to be achieved it is better to have a good grasp of many subjects than expertise in one:</p>\n\n<blockquote>Let him be educated, skillful with the pencil, instructed in geometry, know much history, have followed the philosophers with attention, understand music, have some knowledge of medicine, know the opinions of the jurists, and be acquainted with astronomy and the theory of the heavens.</blockquote>\n\n<p>The relevance of some of these is obvious, others less so, but it’s all valuable to architects and web developers alike. Geometry informs <a href=\"https://www.smashingmagazine.com/2010/02/applying-mathematics-to-web-design/\">proportion and layout</a>; history <a href=\"https://www.smashingmagazine.com/learning-from-the-past-design-legacy-art/\">puts designs in context</a> and ensures they are understood as they are meant to be; philosophy helps us to approach projects honestly and <a href=\"https://www.smashingmagazine.com/2020/04/ethical-design-handbook-followup/\">ethically</a>; music awakens us to <a href=\"https://www.smashingmagazine.com/2012/04/designing-with-audio-what-is-sound-good-for/\">the role of sound</a>; medicine gives thought to accessibility, and potential strains on the <a href=\"https://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/\">eye</a>, <a href=\"https://www.smashingmagazine.com/2012/09/guidelines-for-designing-with-audio/\">ear</a>, or even <a href=\"https://www.smashingmagazine.com/2016/09/the-thumb-zone-designing-for-mobile-users/\">thumb</a>; and <a href=\"https://www.smashingmagazine.com/2018/02/gdpr-for-web-developers/\">law looms larger now than ever</a>. The theory of the heavens might be a stretch, but you get the idea.</p>\n\n<p>Here are yet more links to help you on your way:</p>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2017/12/building-better-ui-designs-layout-grids/\">‘Building Better UI Designs With Layout Grids’</a> by Nick Babich</li>\n<li>\n<a href=\"https://en.99designs.fr/blog/tips/history-of-the-grid-part-1/\">‘History of the design grid’</a> by Alex Bigman</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2019/11/newspapers-teach-web-design/\">‘What Newspapers Can Teach Us About Web Design’</a> by yours truly</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2018/04/best-practices-grid-layout/\">‘Best Practices With CSS Grid Layouts’</a> by Rachel Andrew</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2012/04/designing-with-audio-what-is-sound-good-for/\">‘Designing With Audio: What Is Sound Good For?’</a> by Karen Kaushansky</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2017/03/beauty-imperfection-interface-design/\">‘The Beauty Of Imperfection In Interface Design’</a> by Javier Cuello</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2017/03/resilient-web-design/\">‘The Road To Resilient Web Design’</a> by Jeremy Keith.</li>\n</ul>\n<p>Not that theory alone will get you there. There’s no substitute for learning through doing. As <a href=\"https://plato.stanford.edu/entries/architecture/tradition.html\">the Stanford Encyclopedia of Philosophy notes</a>, “the Vitruvian picture of architecture is rooted in experiential knowledge of making, doing, and crafting.” Or better yet, as Vitruvius himself puts it: “Knowledge is the child of practice and theory.”</p>\n\n<p>The Vitruvian triad is a worthy standard to use whether you’re building a coliseum or a portfolio website. Not everyone has the luxury of (or budget for) a team of experts, and even if we did, why deny ourselves of the breadth of knowledge that strong design requires? We can build Levittown or we can build Rome, and everything in between. A useful, durable, beautiful Internet sounds like a good deal to me.</p> \n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, yk, il)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "Solving Common Cross-Platform Issues When Working With Flutter",
            "pubDate": "2020-06-18 10:30:00",
            "link": "https://www.smashingmagazine.com/2020/06/common-cross-platform-issues-flutter/",
            "guid": "https://www.smashingmagazine.com/2020/06/common-cross-platform-issues-flutter/",
            "author": "Carmine Zaccagnino",
            "thumbnail": "https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png",
            "description": "I’ve seen a lot of confusion online regarding Web development with Flutter and, often, it’s sadly for the wrong reasons.\nSpecifically, people sometimes confuse it with the older Web-based mobile (and desktop) cross-platform frameworks, which basically were just Web pages running within browsers running within a wrapper app.\nThat was truly cross-platform in the sense that the interfaces were the same anyway because you only had access to the interfaces normally accessible on the Web.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/common-cross-platform-issues-flutter/\">\n<title>Solving Common Cross-Platform Issues When Working With Flutter</title>\n<article><header><h1>Solving Common Cross-Platform Issues When Working With Flutter</h1>\n                  \n                    \n                    <address>Carmine Zaccagnino</address>\n                  \n                  <time datetime=\"2020-06-18T10:30:00+00:00\" class=\"op-published\">2020-06-18T10:30:00+00:00</time><time datetime=\"2020-06-18T10:30:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>I’ve seen a lot of confusion online regarding Web development with Flutter and, often, it’s sadly for the wrong reasons.</p>\n\n<p>Specifically, people sometimes confuse it with the older Web-based mobile (and desktop) cross-platform frameworks, which basically were just Web pages running within browsers running within a wrapper app.</p>\n\n<p>That was truly cross-platform in the sense that the interfaces were the same anyway because you only had access to the interfaces normally accessible on the Web.</p>\n\n<p>Flutter isn’t that, though: it runs natively on each platform, and it means each app runs just like it would run if it were written in Java/Kotlin or Objective-C/Swift on Android and iOS, pretty much. You need to know that because this implies that you need to take care of the many differences between these very diverse platforms.</p>\n\n<p>In this article, we’re going to see some of those differences and how to overcome them. More specifically, we’re going to talk about storage and UI differences, which are the ones that most often cause confusion to developers when writing Flutter code that they want to be cross-platform.</p>\n\n\n  <div data-component=\"FeaturePanel\" data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container hidden\"></div>\n\n\n<h3>Example 1: Storage</h3>\n\n<p>I recently <a href=\"https://carmine.dev/posts/flutterwebjwt/\">wrote on my blog</a> about the need for a different approach to storing JWTs in Web apps when compared to mobile apps.</p>\n\n<p>That is because of the different nature of the platforms’ storage options, and the need to know each and their native development tools.</p>\n\n<h4>Web</h4>\n\n<p>When you write a Web app, the storage options you have are:</p>\n\n<ol>\n<li>downloading/uploading files to/from disk, which requires user interaction and is therefore only suitable for files meant to be read or created by the user;</li>\n<li>using cookies, which may or may not be accessible from JS (depending on whether or not they’re <code>httpOnly</code>) and are automatically sent along with requests to a given domain and saved when they come as part of a response;</li>\n<li>using JS <code>localStorage</code> and <code>sessionStorage</code>, accessible by any JS on the website, but only from JS that is part of the pages of that website.</li>\n</ol>\n<h4>Mobile</h4>\n\n<p>The situation when it comes to mobile apps is completely different. The storage options are the following:</p>\n\n<ol>\n<li>local app documents or cache storage, accessible by that app;</li>\n<li>other local storage paths for user-created/readable files;</li>\n<li>\n<code>NSUserDefaults</code> and <code>SharedPreferences</code> respectively on iOS and Android for key-value storage;</li>\n<li>\n<code>Keychain</code> on iOS and <code>KeyStore</code> on Android for secure storage of, respectively, any data and cryptographic keys.</li>\n</ol>\n<p>If you don’t know that, you’re going to make a mess of your implementations because you need to know what storage solution you’re actually using and what the advantages and drawbacks are.</p>\n\n<h4>Cross-Platform Solutions: An Initial Approach</h4>\n\n<p>Using the Flutter <code>shared_preferences</code> package uses <code>localStorage</code> on the Web, <code>SharedPreferences</code> on Android and <code>NSUserDefaults</code> on iOS. Those have completely different implications for your app, especially if you’re storing sensitive information like session tokens: <code>localStorage</code> can be read by the client, so it’s a problem if you’re vulnerable to XSS. Even though mobile apps aren’t really vulnerable to XSS, <code>SharedPreferences</code> and <code>NSUserDefaults</code> are not secure storage methods because they can be compromised on the client side since they are not secure storage and not encrypted. That’s because they are meant for user preferences, as mentioned <a href=\"https://developer.apple.com/documentation/foundation/nsuserdefaults\">here in the case of iOS</a> and <a href=\"https://developer.android.com/topic/security/data\">here in the Android documentation</a> when talking about the Security library which is designed to provide wrappers to the <code>SharedPreferences</code> specifically to encrypt the data before storing it.</p>\n\n<h4>Secure Storage On Mobile</h4>\n\n<p>The only secure storage solutions on mobile are <code>Keychain</code> and <code>KeyStore</code> on iOS and Android respectively, whereas <em>there is no secure storage on the Web</em>.</p>\n\n<p>The <a href=\"https://developer.apple.com/documentation/security/certificate_key_and_trust_services/keys/storing_keys_in_the_keychain\"><code>Keychain</code></a> and <a href=\"https://developer.android.com/training/articles/keystore\"><code>KeyStore</code></a> are very different in nature, though: <code>Keychain</code> is a generic credentials storage solution, whereas the <code>KeyStore</code> is used to store (and can generate) <em>cryptographic keys</em>, either symmetric keys or public/private keys.</p>\n\n<p>This means that if, for instance, you need to store a session token, on iOS you can let the OS manage the encryption part and just send your token to the <code>Keychain</code>, whereas on Android it’s a bit more of a manual experience because you need to <em>generate</em> (not hard-code, that’s bad) a key, use it to encrypt the token, store the encrypted token in <code>SharedPreferences</code> and store the key in the <code>KeyStore</code>.</p>\n\n<p>There are different approaches to that, as are most things in security, but the simplest is probably to use symmetric encryption, as there is no need for public key cryptography since your app both encrypts and decrypts the token.</p>\n\n<p>Obviously, you don’t need to write mobile platform-specific code that does all of that, as <a href=\"https://pub.dev/packages/flutter_secure_storage\">there is a Flutter plugin that does all of that</a>, for instance.</p>\n\n<h4>The Lack Of Secure Storage On the Web</h4>\n\n<p>That was, actually, the reason that compelled me to write this post. I wrote about using that package to store JWT on mobile apps and people wanted <em>the Web version</em> of that but, as I said, <em>there is no secure storage on the Web</em>. It doesn’t exist.</p>\n\n<p>Does that mean your JWT has to be out in the open?</p>\n\n<p>No, not at all. You can use <code>httpOnly</code> cookies, can’t you? Those aren’t accessible by JS and are sent only to your server. The issue with that is that they’re <em>always</em> sent to your server, even if one of your users clicks on a GET request URL on someone else’s website and that GET request has side effects you or your user won’t like. This actually works for other request types as well, it’s just more complicated. It’s called Cross-Site Request Forgery and you don’t want that. It’s among the <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Website_security\">web security threats mentioned in Mozilla’s MDN docs</a>, where you can find a more complete explanation.</p>\n\n<p>There are prevention methods. The most common one is having two tokens, actually: one of them getting to the client as an <code>httpOnly</code> cookie, the other as part of the response. The latter has to be stored in <code>localStorage</code> and not in cookies because we don’t want it to be sent automatically to the server.</p>\n\n<h4>Solving Both</h4>\n\n<p>What if you have both a mobile app and a Web app?</p>\n\n<p>That can be dealt with in one of two ways:</p>\n\n<ol>\n<li>Use the same backend endpoint, but manually get and send the cookies using the cookie-related HTTP headers;</li>\n<li>Create a separate non-Web backend endpoint that generates <em>different</em> token than either token used by the Web app and then allow for regular JWT authorization if the client is able to provide the mobile-only token.</li>\n</ol>\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Running Different Code On Different Platforms</h3>\n\n<p>Now, let’s see how we can run different code on different platforms in order to be able to compensate for the differences.</p>\n\n<h4>Creating A Flutter Plugin</h4>\n\n<p>Especially to solve the problem of storage, one way you can do that is with a plugin package: plugins provide a common Dart interface and can run different code on different platforms, including native platform-specific Kotlin/Java or Swift/Objective-C code. Developing packages and plugins is rather complex, but it’s explained in many places on the Web and elsewhere (for example in Flutter books), <a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages\">including the official Flutter documentation</a>.</p>\n\n<p>For mobile platforms, for instance, there already is a secure storage plugin, and that’s <a href=\"https://pub.dev/packages/flutter_secure_storage\"><code>flutter_secure_storage</code></a>, for which you can find an example of usage <a href=\"https://carmine.dev/posts/jwtauth/\">here</a>, but that doesn’t work on the Web, for example.</p>\n\n<p>On the other hand, for simple key-value storage that also works on the web, there’s a cross-platform Google-developed first-party plugin package called <a href=\"https://pub.dev/packages/shared_preferences\"><code>shared_preferences</code></a>, which has a Web-specific component called <a href=\"https://pub.dev/packages/shared_preferences_web\"><code>shared_preferences_web</code></a> which uses <code>NSUserDefaults</code>, <code>SharedPreferences</code> or <code>localStorage</code> depending on the platform.</p>\n\n<h4>TargetPlatform on Flutter</h4>\n\n<p>After importing <code>package:flutter/foundation.dart</code>, you  can compare <code>Theme.of(context).platform</code> to the values:</p>\n\n<ul>\n<li><code>TargetPlatform.android</code></li>\n<li><code>TargetPlatform.iOS</code></li>\n<li><code>TargetPlatform.linux</code></li>\n<li><code>TargetPlatform.windows</code></li>\n<li><code>TargetPlatform.macOS</code></li>\n<li><code>TargetPlatform.fuchsia</code></li>\n</ul>\n<p>and write your functions so that, for each platform you want to support, they do the appropriate thing. This will come especially useful for the next example of platform difference, and that is differences in how widgets are displayed on different platforms.</p>\n\n<p>For that use case, in particular, there is also a reasonably popular <a href=\"https://pub.dev/packages/flutter_platform_widgets\"><code>flutter_platform_widgets</code> plugin</a>, which simplifies the development of platform-aware widgets.</p>\n\n<h3>Example 2: Differences In How The Same Widget Is Displayed</h3>\n\n<p>You can’t just write cross-platform code and pretend a browser, a phone, a computer, and a smartwatch are the same thing — unless you want your Android and iOS app to be a WebView and your desktop app to be built with Electron. There are plenty of reasons not to do that, and it’s not the point of this piece to convince you to use frameworks like Flutter instead that keep your app native, with all the performance and user experience advantages that come with it, while allowing you to write code that is going to be the same for all platforms most of the time.</p>\n\n<p>That requires care and attention, though, and at least a basic knowledge of the platforms you want to support, their actual native APIs, and all of that. React Native users need to pay even more attention to that because that framework uses the built-in OS widgets, so you actually need to pay even more attention to how the app looks by testing it extensively on both platforms, without being able to switch between iOS and Material widget on the fly like it’s possible with Flutter.</p>\n\n<h4>What Changes Without Your Request</h4>\n\n<p>There are some aspects of the UI of your app that are automatically changed when you switch platforms. This section also mentions what changes between Flutter and React Native in this respect.</p>\n\n<h5>Between Android And iOS (Flutter)</h5>\n\n<p>Flutter is capable of rendering Material widgets on iOS (and Cupertino (iOS-like) widgets on Android), but what it DOESN’T do is show exactly the same thing on Android and iOS: Material theming especially adapts to the conventions of each platform.</p>\n\n<p>For instance, navigation animations and transitions and default fonts are different, but those don’t impact your app that much.</p>\n\n<p>What may affect some of your choices when it comes to aesthetics or UX is the fact that some static elements also change. Specifically, some icons change between the two platforms, app bar titles are in the middle on iOS and on the left on Android (on the left of the available space in case there is a back button or the button to open a Drawer (<a href=\"https://material.io/components/navigation-drawer\">explained here in the Material Design guidelines</a> and also known as a hamburger menu). Here’s what a Material app with a Drawer looks like on Android:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png\" sizes=\"100vw\" alt=\"image of an Android app showing where the app bar title appears on Flutter Android Material apps\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Material app running on Android: the AppBar title is in the left side of the available space. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/c4c36597-13ec-4a18-838e-ad9c570dab81/1-cross-platform-issues-flutter.png\">Large preview</a>)\n    </figcaption></figure><p>And what the same, very simple, Material app looks like on iOS:</p>\n\n\n\n\n\n\n\n\n\n\n\n<figure class=\"\n  \n  \n  \"><a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e9f3716-8f0c-44fa-a735-abb589a07732/2-cross-platform-issues-flutter.png\">\n    \n    <img srcset=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e9f3716-8f0c-44fa-a735-abb589a07732/2-cross-platform-issues-flutter.png 400w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_800/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e9f3716-8f0c-44fa-a735-abb589a07732/2-cross-platform-issues-flutter.png 800w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1200/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e9f3716-8f0c-44fa-a735-abb589a07732/2-cross-platform-issues-flutter.png 1200w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_1600/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e9f3716-8f0c-44fa-a735-abb589a07732/2-cross-platform-issues-flutter.png 1600w,\n\t\t\t        https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_2000/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e9f3716-8f0c-44fa-a735-abb589a07732/2-cross-platform-issues-flutter.png 2000w\" src=\"https://res.cloudinary.com/indysigner/image/fetch/f_auto,q_auto/w_400/https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e9f3716-8f0c-44fa-a735-abb589a07732/2-cross-platform-issues-flutter.png\" sizes=\"100vw\" alt=\"image of an iOS app showing where the app bar title appears on Flutter iOS Material apps\"></a>\n  \n\n  \n    <figcaption class=\"op-vertical-bottom\">\n      Material app running on iOS: the AppBar title is in the middle. (<a href=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/8e9f3716-8f0c-44fa-a735-abb589a07732/2-cross-platform-issues-flutter.png\">Large preview</a>)\n    </figcaption></figure><h5>Between Mobile and Web and With Screen Notches (Flutter)</h5>\n\n<p>On the Web there is a bit of a different situation, as mentioned also in <a href=\"https://www.smashingmagazine.com/2020/04/responsive-web-desktop-development-flutter/\">this Smashing article about Responsive Web Development with Flutter</a>: in particular, in addition to having to optimize for bigger screens and account for the way people expect to navigate through your site — which is the main focus of that article — you have to worry about the fact that sometimes widgets are placed outside of the browser window. Also, some phones have notches in the top part of their screen or other impediments to the correct viewing of your app because of some sort of obstruction.</p>\n\n<p>Both of these problems can be avoided by wrapping your widgets in a <code>SafeArea</code> widget, which is a particular kind of padding widget which makes sure your widgets fall into a place where they can actually be displayed without anything impeding the users’ ability to see them, be it a hardware or software constraint.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h4>In React Native</h4>\n\n<p>React Native requires much more attention and a much deeper knowledge of each platform, in addition to requiring you to run the iOS Simulator as well as the Android Emulator at the very least in order to be able to test your app on both platforms: it’s not the same and it converts its JavaScript UI elements to platform-specific widgets. In other words, your React Native apps will always look like iOS — with Cupertino UI elements as they are sometimes called — and your Android apps will always look like regular Material Design Android apps because it’s using the platform’s widgets.</p>\n\n<p>The difference here is that Flutter renders its widgets with its own low-level rendering engine, which means you can test both app versions on one platform.</p>\n\n<h3>Getting Around That Issue</h3>\n\n<p>Unless you’re going for something very specific, your app is supposed to look different on different platforms otherwise some of your users will be unhappy.</p>\n\n<p>Just like you shouldn’t simply ship a mobile app to the web (as I wrote in the aforementioned Smashing post), you shouldn’t ship an app full of Cupertino widgets to Android users, for example, because it’s going to be confusing for the most part. On the other hand, having the chance to actually run an app that has widgets that are meant for another platform allows you to test the app and show it to people in both versions without having to use two devices for that necessarily.</p>\n\n<h3>The Other Side: Using The Wrong Widgets For The Right Reasons</h3>\n\n<p>But that also means that you can do most of your Flutter development on a Linux or Windows workstation without sacrificing the experience of your iOS users, and then just build the app for the other platform and not have to worry about thoroughly testing it.</p>\n\n<h3>Next Steps</h3>\n\n<p>Cross-platform frameworks are awesome, but they shift responsibility to you, the developer, to understand how each platform works and how to make sure your app adapts and is pleasant to use for your users. Other small things to consider may be, for example, using different descriptions for what might be in essence the same thing if there are different conventions on different platforms.</p>\n\n<p>It’s great to not have to build the two (or more) apps separately using different languages, but you still need to keep in mind you are, in essence, building more than one app and that requires thinking about each of the apps you are building.</p>\n\n<h4>Further Resources</h4>\n\n<ul>\n<li>\n<a href=\"https://gallery.flutter.dev/\">The Flutter Gallery website</a> and <a href=\"https://play.google.com/store/apps/details?id=io.flutter.demo.gallery&amp;hl=en\">Android app</a>, showcasing the use of Flutter widgets typical of different platforms and their platform agnosticism</li>\n<li><a href=\"https://api.flutter.dev/flutter/foundation/TargetPlatform-class.html\">Flutter API Documentation on TargetPlatform</a></li>\n<li><a href=\"https://flutter.dev/docs/development/packages-and-plugins/developing-packages\">Flutter documentation on the creation of packages and plugins</a></li>\n<li><a href=\"https://flutter.dev/docs/resources/platform-adaptations\">Flutter documentation on platform adaptations</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies\">MDN documentation on cookies</a></li>\n</ul>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, yk, il)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "Mirage JS Deep Dive: Using Mirage JS And Cypress For UI Testing (Part 4)",
            "pubDate": "2020-06-17 10:30:00",
            "link": "https://www.smashingmagazine.com/2020/06/mirage-javascript-cypress-ui-testing/",
            "guid": "https://www.smashingmagazine.com/2020/06/mirage-javascript-cypress-ui-testing/",
            "author": "Kelvin Omereshone",
            "thumbnail": "https://www.smashingmagazine.com/images/logo/logo--red.png",
            "description": "One of my favorite quotes about software testing is from the Flutter documentation. It says:\n“How can you ensure that your app continues to work as you add more features or change existing functionality? By writing tests.” On that note, this last part of the Mirage JS Deep Dive series will focus on using Mirage to test your JavaScript front-end application.\nNote: This article assumes a Cypress environment. Cypress is a testing framework for UI testing.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/mirage-javascript-cypress-ui-testing/\">\n<title>Mirage JS Deep Dive: Using Mirage JS And Cypress For UI Testing (Part 4)</title>\n<article><header><h1>Mirage JS Deep Dive: Using Mirage JS And Cypress For UI Testing (Part 4)</h1>\n                  \n                    \n                    <address>Kelvin Omereshone</address>\n                  \n                  <time datetime=\"2020-06-17T10:30:00+00:00\" class=\"op-published\">2020-06-17T10:30:00+00:00</time><time datetime=\"2020-06-17T10:30:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>One of my favorite quotes about software testing is from the Flutter documentation. It says:</p>\n\n<blockquote> “How can you ensure that your app continues to work as you add more features or change existing functionality? By writing tests.”</blockquote>\n\n<p>On that note, this last part of the <a href=\"https://www.smashingmagazine.com/2020/04/miraje-js-models-associations/\">Mirage JS Deep Dive series</a> will focus on using Mirage to test your JavaScript front-end application.</p>\n\n<p><strong>Note</strong>: <em>This article assumes a <a href=\"https://www.cypress.io/\">Cypress</a> environment. Cypress is a testing framework for UI testing. You can, however, transfer the knowledge here to whatever UI testing environment or framework you use.</em></p>\n\n<h4>Read <span class=\"rh\">Previous Parts</span> Of The Series:</h4>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/04/miraje-js-models-associations/\">Part 1</a>: Understanding Mirage JS Models And Associations</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/05/mirage-javascript-factories-fixtures-serializers/\">Part 2</a>: Understanding Factories, Fixtures And Serializers</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/mirage-javascript-timing-response-passthrough/\">Part 3</a>: Understanding Timing, Response And Passthrough</li>\n</ul>\n<h3>UI Tests Primer</h3>\n\n<p>UI or User Interface test is a form of <a href=\"https://en.wikipedia.org/wiki/Acceptance_testing\">acceptance testing</a> done to verify the <strong>user</strong> flows of your front-end application. The emphasis of these kinds of software tests is on the end-user that is the actual person who will be interacting with your web application on a variety of devices ranging from desktops, laptops to mobile devices. These <strong>users</strong> would be interfacing or interacting with your application using input devices such as a keyboard, mouse, or touch screens. UI tests, therefore, are written to mimic the <strong>user</strong> interaction with your application as close as possible.</p>\n\n<p>Let’s take an e-commerce website for example. A typical UI test scenario would be:</p>\n\n<ul>\n<li>The user can view the list of products when visiting the homepage.</li>\n</ul>\n<p>Other UI test scenarios might be:</p>\n\n<ul>\n<li>The user can see the name of a product on the product’s detail page.</li>\n<li>The user can click on the “add to cart” button.</li>\n<li>The user can checkout.</li>\n</ul>\n<p>You get the idea, right?</p>\n\n<p>In making UI Tests, you will mostly be relying on your back-end states, i.e. did it return the products or an error? The role Mirage plays in this is to make those server states available for you to tweak as you need. So instead of making an actual request to your production server in your UI tests, you make the request to Mirage mock server.</p>\n\n<p>For the remaining part of this article, we will be performing UI tests on a fictitious e-commerce web application UI. So let’s get started.</p>\n\n\n  <div data-component=\"FeaturePanel\" data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container hidden\"></div>\n\n\n<h3>Our First UI Test</h3>\n\n<p>As earlier stated, this article assumes a Cypress environment. Cypress makes testing UI on the web fast and easy. You could simulate clicks and navigation and you can programmatically visit routes in your application. See the <a href=\"https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell\">docs</a> for more on Cypress.</p>\n\n<p>So, assuming Cypress and Mirage are available to us, let’s start off by defining a proxy function for your API request. We can do so in the <code>support/index.js</code> file of our Cypress setup. Just paste the following code in:</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">// cypress/support/index.js\nCypress.on(\"window:before:load\", (win) =&gt; {\n  win.handleFromCypress = function (request) {\n    return fetch(request.url, {\n      method: request.method,\n      headers: request.requestHeaders,\n      body: request.requestBody,\n    }).then((res) =&gt; {\n      let content =\n        res.headers.map[\"content-type\"] === \"application/json\"\n          ? res.json()\n          : res.text()\n      return new Promise((resolve) =&gt; {\n        content.then((body) =&gt; resolve([res.status, res.headers, body]))\n      })\n    })\n  }\n})\n</code></pre>\n</div>\n\n<p>Then, in your app bootstrapping file (<code>main.js</code> for Vue, <code>index.js</code> for React), we’ll use Mirage to proxy your app’s API requests to the <code>handleFromCypress</code> function only when Cypress is running. Here is the code for that:</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">import { Server, Response } from \"miragejs\"\n\nif (window.Cypress) {\n  new Server({\n    environment: \"test\",\n    routes() {\n      let methods = [\"get\", \"put\", \"patch\", \"post\", \"delete\"]\n      methods.forEach((method) =&gt; {\n        this[method](\"/*\", async (schema, request) =&gt; {\n          let [status, headers, body] = await window.handleFromCypress(request)\n          return new Response(status, headers, body)\n        })\n      })\n    },\n  })\n}\n</code></pre>\n</div>\n\n<p>With that setup, anytime Cypress is running, your app knows to use Mirage as the mock server for all API requests.</p>\n\n<p>Let’s continue writing some UI tests. We’ll begin by testing our homepage to see if it has <strong>5 products</strong> displayed. To do this in Cypress, we need to create a <code>homepage.test.js</code> file in the <code>tests</code> folder in the root of your project directory. Next, we’ll tell Cypress to do the following:</p>\n\n<ul>\n<li>Visit the homepage i.e <code>/</code> route</li>\n<li>Then <strong>assert</strong> if it has li elements with the class of <code>product</code> and also checks if they are 5 in numbers.</li>\n</ul>\n<p>Here is the code:</p>\n\n<pre><code class=\"language-javascript\">// homepage.test.js\nit('shows the products', () =&gt; {\n  cy.visit('/');\n\n  cy.get('li.product').should('have.length', 5);\n});\n</code></pre>\n\n<p>You might have guessed that this test would fail because we don’t have a production server returning 5 products to our front-end application. So what do we do? We mock out the server in Mirage! If we bring in Mirage, it can intercept all network calls in our tests. Let’s do this below and start the Mirage server before each test in the <code>beforeEach</code> function and also shut it down in the <code>afterEach</code> function. The <code>beforeEach</code> and <code>afterEach</code> functions are both provided by Cypress and they were made available so you could run code before and after each test run in your test suite — hence the name. So let’s see the code for this:</p>\n\n<pre><code class=\"language-javascript\">// homepage.test.js\nimport { Server } from \"miragejs\"\n\nlet server\n\nbeforeEach(() =&gt; {\n  server = new Server()\n})\n\nafterEach(() =&gt; {\n  server.shutdown()\n})\n\nit(\"shows the products\", function () {\n  cy.visit(\"/\")\n\n  cy.get(\"li.product\").should(\"have.length\", 5)\n})\n</code></pre>\n\n<p>Okay, we are getting somewhere; we have imported the Server from Mirage and we are starting it and shutting it down in <code>beforeEach</code> and <code>afterEach</code> functions respectively. Let’s go about mocking our product resource.</p>\n\n<pre><code class=\"language-javascript\">\n// homepage.test.js\nimport { Server, Model } from 'miragejs';\n\nlet server;\n\nbeforeEach(() =&gt; {\n  server = new Server({\n    models: {\n      product: Model,\n    },\n\n    routes() {\n      this.namespace = 'api';\n\n      this.get('products', ({ products }, request) =&gt; {\n        return products.all();\n      });\n    },\n  });\n});\n\nafterEach(() =&gt; {\n  server.shutdown();\n});\n\nit('shows the products', function() {\n  cy.visit('/');\n\n  cy.get('li.product').should('have.length', 5);\n});\n</code></pre>\n\n<p><strong>Note</strong>: <em>You can always take a peek at the previous parts of this series if you don’t understand the Mirage bits of the above code snippet.</em></p>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/04/miraje-js-models-associations/\">Part 1</a>: <em>Understanding Mirage JS Models And Associations</em>\n</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/05/mirage-javascript-factories-fixtures-serializers/\">Part 2</a>: <em>Understanding Factories, Fixtures And Serializers</em>\n</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/mirage-javascript-timing-response-passthrough/\">Part 3</a>: <em>Understanding Timing, Response And Passthrough</em>\n</li>\n</ul>\n<p>Okay, we have started fleshing out our Server instance by creating the product model and also by creating the route handler for the <code>/api/products</code> route. However, if we run our tests, it will fail because we don’t have any products in the Mirage database yet.</p>\n\n<p>Let’s populate the Mirage database with some products. In order to do this, we could have used the <code>create()</code> method on our server instance, but creating 5 products by hand seems pretty tedious. There should be a better way.</p>\n\n<p>Ah yes, there is. Let’s utilize factories (as explained in the <a href=\"https://www.smashingmagazine.com/2020/05/mirage-javascript-factories-fixtures-serializers/\">second part</a> of this series). We’ll need to create our product factory like so:</p>\n\n<pre><code class=\"language-javascript\">// homepage.test.js\nimport { Server, Model, Factory } from 'miragejs';\n\nlet server;\n\nbeforeEach(() =&gt; {\n  server = new Server({\n    models: {\n      product: Model,\n    },\n     factories: {\n      product: Factory.extend({\n        name(i) {\n            return `Product ${i}`\n        }\n      })\n    },\n\n    routes() {\n      this.namespace = 'api';\n\n      this.get('products', ({ products }, request) =&gt; {\n        return products.all();\n      });\n    },\n  });\n});\n\nafterEach(() =&gt; {\n  server.shutdown();\n});\n\nit('shows the products', function() {\n  cy.visit('/');\n\n  cy.get('li.product').should('have.length', 5);\n});\n</code></pre>\n\n<p>Then, finally, we’ll use <code>createList()</code> to quickly create the 5 products that our test needs to pass.</p>\n\n<p>Let’s do this:</p>\n\n<pre><code class=\"language-javascript\">// homepage.test.js\nimport { Server, Model, Factory } from 'miragejs';\n\nlet server;\n\nbeforeEach(() =&gt; {\n  server = new Server({\n    models: {\n      product: Model,\n    },\n     factories: {\n      product: Factory.extend({\n        name(i) {\n            return `Product ${i}`\n        }\n      })\n    },\n\n    routes() {\n      this.namespace = 'api';\n\n      this.get('products', ({ products }, request) =&gt; {\n        return products.all();\n      });\n    },\n  });\n});\n\nafterEach(() =&gt; {\n  server.shutdown();\n});\n\nit('shows the products', function() {\n  server.createList(\"product\", 5)\n  cy.visit('/');\n\n  cy.get('li.product').should('have.length', 5);\n});\n</code></pre>\n\n<p>So when we run our test, it passes!</p>\n\n<p><strong>Note</strong>: <em>After each test, Mirage’s server is shutdown and reset, so none of this state will leak across tests.</em></p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Avoiding Multiple Mirage Server</h3>\n\n<p>If you have been following along this series, you’d notice when we were using Mirage in development to intercept our network requests; we had a <code>server.js</code> file in the root of our app where we set up Mirage. In the spirit of DRY (Don’t Repeat Yourself), I think it would be good to utilize that server instance instead of having two separate instances of Mirage for both development and testing. To do this (in case you don’t have a <code>server.js</code> file already), just create one in your project <strong>src</strong> directory.</p>\n\n<p><strong>Note</strong>: <em>Your structure will differ if you are using a JavaScript framework but the general idea is to setup up the server.js file in the src root of your project.</em></p>\n\n<p>So with this new structure, we’ll export a function in <code>server.js</code> that is responsible for creating our Mirage server instance. Let’s do that:</p>\n\n<pre><code class=\"language-javascript\">// src/server.js\n\nexport function makeServer() { /* Mirage code goes here */}\n</code></pre>\n\n<p>Let’s complete the implementation of the <code>makeServer</code> function by removing the Mirage JS server we created in <code>homepage.test.js</code> and adding it to the <code>makeServer</code> function body:</p>\n\n<pre><code class=\"language-javascript\">import { Server, Model, Factory } from 'miragejs';\n\nexport function makeServer() {\n  let server = new Server({\n    models: {\n      product: Model,\n    },\n    factories: {\n      product: Factory.extend({\n        name(i) {\n          return `Product ${i}`;\n        },\n      }),\n    },\n    routes() {\n      this.namespace = 'api';\n\n      this.get('/products', ({ products }) =&gt; {\n        return products.all();\n      });\n    },\n    seeds(server) {\n      server.createList('product', 5);\n    },\n  });\n  return server;\n}\n</code></pre>\n\n<p>Now all you have to do is import <code>makeServer</code> in your test. Using a single Mirage Server instance is cleaner; this way you don’t have to maintain two server instances for both development and test environments.</p>\n\n<p>After importing the <code>makeServer</code> function, our test should now look like this:</p>\n\n<pre><code class=\"language-javascript\">import { makeServer } from '/path/to/server';\n\nlet server;\n\nbeforeEach(() =&gt; {\n  server = makeServer();\n});\n\nafterEach(() =&gt; {\n  server.shutdown();\n});\n\nit('shows the products', function() {\n  server.createList('product', 5);\n\n  cy.visit('/');\n\n  cy.get('li.product').should('have.length', 5);\n});\n</code></pre>\n\n<p>So we now have a central Mirage server that serves us in both development and testing. You can also use the <code>makeServer</code> function to start Mirage in development (see <a href=\"https://www.smashingmagazine.com/2020/04/miraje-js-models-associations/\">first part</a> of this series).</p>\n\n<p>Your Mirage code should not find it’s way into production. Therefore, depending on your build setup, you would need to only start Mirage during development mode.</p>\n\n<p><strong>Note</strong>: <em>Read my article on <a href=\"https://www.smashingmagazine.com/2020/02/api-mocking-mirage-vue-javascript/\">how to set up API Mocking with Mirage and Vue.js</a> to see how I did that in Vue so you could replicate in whatever front-end framework you use.</em></p>\n\n<h3>Testing Environment</h3>\n\n<p>Mirage has two environments: <strong>development</strong> (default) and <strong>test</strong>. In development mode, the Mirage server will have a default response time of 400ms(which you can customize. See the third article of this series for that), logs all server responses to the console, and loads the development seeds.</p>\n\n<p>However, in the test environment, we have:</p>\n\n<ul>\n<li>0 delays to keep our tests fast</li>\n<li>Mirage suppresses all logs so as not to pollute your CI logs</li>\n<li>Mirage will also ignore the <code>seeds()</code> function so that your seed data can be used solely for development but won’t leak into your tests. This helps keep your tests deterministic.</li>\n</ul>\n<p>Let’s update our <code>makeServer</code> so we can have the benefit of the test environment. To do that, we’ll make it accept an object with the environment option(we will default it to development and override it in our test). Our <code>server.js</code> should now look like this:</p>\n\n<pre><code class=\"language-javascript\">// src/server.js\nimport { Server, Model, Factory } from 'miragejs';\n\nexport function makeServer({ environment = 'development' } = {}) {\n  let server = new Server({\n    environment,\n\n    models: {\n      product: Model,\n    },\n    factories: {\n      product: Factory.extend({\n        name(i) {\n          return `Product ${i}`;\n        },\n      }),\n    },\n\n    routes() {\n      this.namespace = 'api';\n\n      this.get('/products', ({ products }) =&gt; {\n        return products.all();\n      });\n    },\n    seeds(server) {\n      server.createList('product', 5);\n    },\n  });\n  return server;\n}\n</code></pre>\n\n<p>Also note that we are passing the environment option to the Mirage server instance using the <a href=\"http://es6-features.org/#PropertyShorthand\">ES6 property shorthand</a>. Now with this in place, let’s update our test to override the environment value to test. Our test now looks like this:</p>\n\n<pre><code class=\"language-javascript\">import { makeServer } from '/path/to/server';\n\nlet server;\n\nbeforeEach(() =&gt; {\n  server = makeServer({ environment: 'test' });\n});\n\nafterEach(() =&gt; {\n  server.shutdown();\n});\n\nit('shows the products', function() {\n  server.createList('product', 5);\n\n  cy.visit('/');\n\n  cy.get('li.product').should('have.length', 5);\n});\n</code></pre>\n\n<h3>AAA Testing</h3>\n\n<p>Mirage encourages a standard for testing called the triple-A or AAA testing approach. This stands for <strong>Arrange</strong>, <strong>Act</strong> and <strong>Assert</strong>. You could see this structure in our above test already:</p>\n\n<pre><code class=\"language-javascript\">it(\"shows all the products\", function () {\n  // ARRANGE\n  server.createList(\"product\", 5)\n\n  // ACT\n  cy.visit(\"/\")\n\n  // ASSERT\n  cy.get(\"li.product\").should(\"have.length\", 5)\n})\n</code></pre>\n\n<p>You might need to break this pattern but 9 times out of 10 it should work just fine for your tests.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Let’s Test Errors</h3>\n\n<p>So far, we’ve tested our homepage to see if it has 5 products, however, what if the server is down or something went wrong with fetching the products? We don’t need to wait for the server to be down to work on how our UI would look like in such a case. We can simply simulate that scenario with Mirage.</p>\n\n<p>Let’s return a 500 (Server error) when the user is on the homepage. As we have seen in a previous article, to customize Mirage responses we make use of the Response class. Let’s import it and write our test.</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">homepage.test.js\nimport { Response } from \"miragejs\"\n\nit('shows an error when fetching products fails', function() {\n  server.get('/products', () =&gt; {\n    return new Response(\n      500,\n      {},\n      { error: \"Can’t fetch products at this time\" }\n    );\n  });\n\n  cy.visit('/');\n\n  cy.get('div.error').should('contain', \"Can’t fetch products at this time\");\n});\n</code></pre>\n</div>\n\n<p>What a world of flexibility! We just override the response Mirage would return in order to test how our UI would display if it failed fetching products. Our overall <code>homepage.test.js</code> file would now look like this:</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">// homepage.test.js\nimport { Response } from 'miragejs';\nimport { makeServer } from 'path/to/server';\n\nlet server;\n\nbeforeEach(() =&gt; {\n  server = makeServer({ environment: 'test' });\n});\n\nafterEach(() =&gt; {\n  server.shutdown();\n});\n\nit('shows the products', function() {\n  server.createList('product', 5);\n\n  cy.visit('/');\n\n  cy.get('li.product').should('have.length', 5);\n});\n\nit('shows an error when fetching products fails', function() {\n  server.get('/products', () =&gt; {\n    return new Response(\n      500,\n      {},\n      { error: \"Can’t fetch products at this time\" }\n    );\n  });\n\n  cy.visit('/');\n\n  cy.get('div.error').should('contain', \"Can’t fetch products at this time\");\n});\n</code></pre>\n</div>\n\n<p>Note the modification we did to the <code>/api/products</code> handler only lives in our test. That means it works as we previously define when you are in development mode.</p>\n\n<p>So when we run our tests, both should pass.</p>\n\n<p><strong>Note</strong>: <em>I believe its worthy of noting that the elements we are querying for in Cypress should exist in your front-end UI. Cypress doesn’t create HTML elements for you.</em></p>\n\n<h3>Testing The Product Detail Page</h3>\n\n<p>Finally, let’s test the UI of the product detail page. So this is what we are testing for:</p>\n\n<ul>\n<li>User can see the product name on the product detail page</li>\n</ul>\n<p>Let’s get to it. First, we create a new test to test this user flow.</p>\n\n<p>Here is the test:</p>\n\n<pre><code class=\"language-javascript\">it(\"shows the product’s name on the detail route\", function() {\n  let product = this.server.create('product', {\n    name: 'Korg Piano',\n  });\n\n  cy.visit(`/${product.id}`);\n\n  cy.get('h1').should('contain', 'Korg Piano');\n});\n</code></pre>\n\n<p>Your <code>homepage.test.js</code> should finally look like this.</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">// homepage.test.js\nimport { Response } from 'miragejs';\nimport { makeServer } from 'path/to/server;\n\nlet server;\n\nbeforeEach(() =&gt; {\n  server = makeServer({ environment: 'test' });\n});\n\nafterEach(() =&gt; {\n  server.shutdown();\n});\n\nit('shows the products', function() {\n  console.log(server);\n  server.createList('product', 5);\n\n  cy.visit('/');\n\n  cy.get('li.product').should('have.length', 5);\n});\n\nit('shows an error when fetching products fails', function() {\n  server.get('/products', () =&gt; {\n    return new Response(\n      500,\n      {},\n      { error: \"Can’t fetch products at this time\" }\n    );\n  });\n\n  cy.visit('/');\n\n  cy.get('div.error').should('contain', \"Can’t fetch products at this time\");\n});\n\nit(\"shows the product’s name on the detail route\", function() {\n  let product = server.create('product', {\n    name: 'Korg Piano',\n  });\n\n  cy.visit(`/${product.id}`);\n\n  cy.get('h1').should('contain', 'Korg Piano');\n});\n</code></pre>\n</div>\n\n<p>When you run your tests, all three should pass.</p>\n\n<h3>Wrapping Up</h3>\n\n<p>It’s been fun showing you the inners of Mirage JS in this series. I hope you have been better equipped to start having a better front-end development experience by using Mirage to mock out your back-end server. I also hope you’ll use the knowledge from this article to write more acceptance/UI/end-to-end tests for your front-end applications.</p>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/04/miraje-js-models-associations/\">Part 1</a>: Understanding Mirage JS Models And Associations</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/05/mirage-javascript-factories-fixtures-serializers/\">Part 2</a>: Understanding Factories, Fixtures And Serializers</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/mirage-javascript-timing-response-passthrough/\">Part 3</a>: Understanding Timing, Response And Passthrough</li>\n<li>Part 4: <strong>Using Mirage JS And Cypress For UI Testing</strong>\n</li>\n</ul>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ra, il)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "Better Reducers With Immer",
            "pubDate": "2020-06-16 12:30:00",
            "link": "https://www.smashingmagazine.com/2020/06/better-reducers-with-immer/",
            "guid": "https://www.smashingmagazine.com/2020/06/better-reducers-with-immer/",
            "author": "Chidi Orji",
            "thumbnail": "https://www.smashingmagazine.com/images/logo/logo--red.png",
            "description": "As a React developer, you should be already familiar with the principle that state should not be mutated directly. You might be wondering what that means (most of us had that confusion when we started out).\nThis tutorial will do justice to that: you will understand what immutable state is and the need for it. You’ll also learn how to use Immer to work with immutable state and the benefits of using it.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/better-reducers-with-immer/\">\n<title>Better Reducers With Immer</title>\n<article><header><h1>Better Reducers With Immer</h1>\n                  \n                    \n                    <address>Chidi Orji</address>\n                  \n                  <time datetime=\"2020-06-16T12:30:00+00:00\" class=\"op-published\">2020-06-16T12:30:00+00:00</time><time datetime=\"2020-06-16T12:30:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p>As a React developer, you should be already familiar with the principle that <em>state should not be mutated directly.</em> You might be wondering what that means (most of us had that confusion when we started out).</p>\n\n<p>This tutorial will do justice to that: you will understand what immutable state is and the need for it. You’ll also learn how to use Immer to work with immutable state and the benefits of using it.\nYou can find the code in this article in this Github <a href=\"https://github.com/chidimo/immutability-in-js\">repo</a>.</p>\n\n<h3>Immutability In JavaScript And Why It Matters</h3>\n\n<p>Immer.js is a tiny JavaScript library was written by <a href=\"https://michel.codes/\">Michel Weststrate</a> whose stated mission is to allow you “to work with immutable state in a more convenient way.”</p>\n\n<p>But before diving into Immer, let’s quickly have a refresher about immutability in JavaScript and why it matters in a React application.</p>\n\n<p>The latest ECMAScript (aka JavaScript) standard defines nine built-in data types. Of these nine types, there are six that are referred to as <code>primitive</code> values/types. These six primitives are <code>undefined</code>, <code>number</code>, <code>string</code>, <code>boolean</code>, <code>bigint</code>, and <code>symbol</code>. A simple check with JavaScript’s <code>typeof</code>  operator will reveal the types of these data types.</p>\n\n<pre><code class=\"language-javascript\">console.log(typeof 5) // number\nconsole.log(typeof 'name') // string\nconsole.log(typeof (1 </code></pre>\n\n<p>A <code>primitive</code> is a value that is not an object and has no methods. Most important to our present discussion is the fact that a primitive’s value cannot be changed once it is created. Thus, primitives are said to be <code>immutable</code>.</p>\n\n<p>The remaining three types are <code>null</code>, <code>object</code>, and <code>function</code>. We can also check their types using the <code>typeof</code> operator.</p>\n\n<pre><code class=\"language-javascript\">console.log(typeof null) // object\nconsole.log(typeof [0, 1]) // object\nconsole.log(typeof {name: 'name'}) // object\nconst f = () =&gt; ({})\nconsole.log(typeof f) // function\n</code></pre>\n\n<p>These types are <code>mutable</code>. This means that their values can be changed at any time after they are created.</p>\n\n<p>You might be wondering why I have the array <code>[0, 1]</code> up there. Well, in JavaScriptland, an array is simply a special type of object. In case you’re also wondering about <code>null</code> and how it is different from <code>undefined</code>. <code>undefined</code> simply means that we haven’t set a value for a variable while <code>null</code> is a special case for objects. If you know something should be an object but the object is not there, you simply return <code>null</code>.</p>\n\n<p>To illustrate with a simple example, try running the code below in your browser console.</p>\n\n<pre><code class=\"language-markup\">console.log('aeiou'.match(/[x]/gi)) // null\nconsole.log('xyzabc'.match(/[x]/gi)) // [ 'x' ]\n</code></pre>\n\n<p><code>String.prototype.match</code> should return an array, which is an <code>object</code> type. When it can’t find such an object, it returns <code>null</code>. Returning <code>undefined</code> wouldn’t make sense here either.</p>\n\n<p>Enough with that. Let’s return to discussing immutability.</p>\n\n\n  <div data-component=\"FeaturePanel\" data-audience=\"non-subscriber\" data-remove=\"true\" class=\"feature-panel-container hidden\"></div>\n\n\n<p>According to the MDN docs:</p>\n\n<blockquote>“All types except objects define immutable values (that is, values which can’t be changed).”</blockquote>\n\n<p>This statement includes functions because they are a special type of JavaScript object. See function definition <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Function\">here</a>.</p>\n\n<p>Let’s take a quick look at what mutable and immutable data types mean in practice. Try running the below code in your browser console.</p>\n\n<pre><code class=\"language-markup\">let a = 5;\nlet b = a\nconsole.log(`a: ${a}; b: ${b}`) // a: 5; b: 5\nb = 7\nconsole.log(`a: ${a}; b: ${b}`) // a: 5; b: 7\n</code></pre>\n\n<p>Our results show that even though <code>b</code> is “derived” from <code>a</code>, changing the value of <code>b</code> doesn’t affect the value of <code>a</code>. This arises from the fact that when the JavaScript engine executes the statement <code>b = a</code>, it creates a new, separate memory location, puts <code>5</code> in there, and points <code>b</code> at that location.</p>\n\n<p>What about objects? Consider the below code.</p>\n\n<pre><code class=\"language-javascript\">let c = { name: 'some name'}\nlet d = c;\nconsole.log(`c: ${JSON.stringify(c)}; d: ${JSON.stringify(d)}`) // {\"name\":\"some name\"}; d: {\"name\":\"some name\"}\nd.name = 'new name'\nconsole.log(`c: ${JSON.stringify(c)}; d: ${JSON.stringify(d)}`) // {\"name\":\"new name\"}; d: {\"name\":\"new name\"}\n</code></pre>\n\n<p>We can see that changing the name property via variable <code>d</code> also changes it in <code>c</code>. This arises from the fact that when the JavaScript engine executes the statement, <code>c = { name: 'some name</code><code>'</code> <code>}</code>, the JavaScript engine creates a space in memory, puts the object inside, and points <code>c</code> at it. Then, when it executes the statement <code>d = c</code>, the JavaScript engine just points <code>d</code> to the same location. It doesn’t create a new memory location. Thus any changes to the items in <code>d</code> is implicitly an operation on the items in <code>c</code>. Without much effort, we can see why this is trouble in the making.</p>\n\n<p>Imagine you were developing a React application and somewhere you want to show the user’s name as <code>some name</code> by reading from variable <code>c</code>. But somewhere else you had introduced a bug in your code by manipulating the object <code>d</code>. This would result in the user’s name appearing as <code>new name</code>. If <code>c</code> and <code>d</code> were primitives we wouldn’t have that problem. But primitives are too simple for the kinds of state a typical React application has to maintain.</p>\n\n<p>This is about the major reasons why it is important to maintain an immutable state in your application. I encourage you to check out a few other considerations by reading this short section from the Immutable.js README: <a href=\"https://github.com/immutable-js/immutable-js/#the-case-for-immutability\">the case for immutability</a>.</p>\n\n<p>Having understood why we need immutability in a React application, let’s now take a look at how Immer tackles the problem with its <code>produce</code> function.</p>\n\n<h3>Immer’s <code>produce</code> Function</h3>\n\n<p>Immer’s core API is very small, and the main function you’ll be working with is the <code>produce</code> function. <code>produce</code> simply takes an initial state and a callback that defines how the state should be mutated. The callback itself receives a draft (identical, but still a copy) copy of the state to which it makes all the intended update. Finally, it <code>produce</code>s a new, immutable state with all the changes applied.</p>\n\n<p>The general pattern for this sort of state update is:</p>\n\n<pre><code class=\"language-javascript\">// produce signature\nproduce(state, callback) =&gt; nextState\n</code></pre>\n\n<p>Let’s see how this works in practice.</p>\n\n<pre><code class=\"language-javascript\">import produce from 'immer'\n\nconst initState = {\n  pets: ['dog', 'cat'],\n  packages: [\n    { name: 'react', installed: true },\n    { name: 'redux', installed: true },\n  ],\n}\n\n// to add a new package\nconst newPackage = { name: 'immer', installed: false }\n\nconst nextState = produce(initState, draft =&gt; {\n  draft.packages.push(newPackage)\n})\n</code></pre>\n\n<p>In the above code, we simply pass the starting state and a callback that specifies how we want the mutations to happen. It’s as simple as that. We don’t need to touch any other part of the state. It leaves <code>initState</code> untouched and structurally shares those parts of the state that we didn’t touch between the starting and the new states. One such part in our state is the  <code>pets</code>  array. The <code>produce</code>d <code>nextState</code> is an immutable state tree that has the changes we’ve made as well as the parts we didn’t modify.</p>\n\n<p>Armed with this simple, but useful knowledge, let’s take a look at how <code>produce</code> can help us simplify our React reducers.</p>\n\n<h3>Writing Reducers With Immer</h3>\n\n<p>Suppose we have the state object defined below</p>\n\n<pre><code class=\"language-javascript\">const initState = {\n  pets: ['dog', 'cat'],\n  packages: [\n    { name: 'react', installed: true },\n    { name: 'redux', installed: true },\n  ],\n};\n</code></pre>\n\n<p>And we wanted to add a new object, and on a subsequent step, set its <code>installed</code> key to <code>true</code></p>\n\n<pre><code class=\"language-javascript\">const newPackage = { name: 'immer', installed: false };\n</code></pre>\n\n<p>If we were to do this the usual way with JavaScripts object and array spread syntax, our state reducer might look like below.</p>\n\n<pre><code class=\"language-javascript\">const updateReducer = (state = initState, action) =&gt; {\n  switch (action.type) {\n    case 'ADD_PACKAGE':\n      return {\n        ...state,\n        packages: [...state.packages, action.package],\n      };\n    case 'UPDATE_INSTALLED':\n      return {\n        ...state,\n        packages: state.packages.map(pack =&gt;\n          pack.name === action.name\n            ? { ...pack, installed: action.installed }\n            : pack\n        ),\n      };\n    default:\n      return state;\n  }\n};\n</code></pre>\n\n<p>We can see that this is unnecessarily verbose and prone to mistakes for this relatively simple state object. We also have to touch every part of the state, which is unnecessary. Let’s see how we can simplify this with Immer.</p>\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">const updateReducerWithProduce = (state = initState, action) =&gt;\n  produce(state, draft =&gt; {\n    switch (action.type) {\n    case 'ADD_PACKAGE':\n      draft.packages.push(action.package);\n      break;\n    case 'UPDATE_INSTALLED': {\n      const package = draft.packages.filter(p =&gt; p.name === action.name)[0];\n      if (package) package.installed = action.installed;\n      break;\n    }\n    default:\n      break;\n    }\n  });\n</code></pre>\n\nAnd with a few lines of code, we have greatly simplified our reducer. Also, if we fall into the default case, Immer just returns the draft state without us needing to do anything. Notice how there is less boilerplate code and the elimination of state spreading. With Immer, we only concern ourselves with the part of the state that we want to update. If we can’t find such an item, as in the `UPDATE_INSTALLED` action, we simply move on without touching anything else.\n\nThe `produce` function also lends itself to currying. Passing a callback as the first argument to `produce` is intended to be used for currying. The signature of the curried `produce` is \n\n<pre><code class=\"language-javascript\">//curried produce signature\nproduce(callback) =&gt; (state) =&gt; nextState\n</code></pre>\n\nLet’s see how we can update our earlier state with a curried produce. Our curried produce would look like this:\n\n<div class=\"break-out\">\n <pre><code class=\"language-javascript\">const curriedProduce = produce((draft, action) =&gt; {\n  switch (action.type) {\n  case 'ADD_PACKAGE':\n    draft.packages.push(action.package);\n    break;\n  case 'SET_INSTALLED': {\n    const package = draft.packages.filter(p =&gt; p.name === action.name)[0];\n    if (package) package.installed = action.installed;\n    break;\n  }\n  default:\n    break;\n  }\n});\n</code></pre>\n</div>\n\n<p>The curried produce function accepts a function as its first argument and returns a curried produce that only now requires a state from which to produce the next state. The first argument of the function is the draft state (which will be derived from the state to be passed when calling this curried produce). Then follows every number of arguments we wish to pass to the function.</p>\n\n<p>All we need to do now to use this function is to pass in the state from which we want to produce the next state and the action object like so.</p>\n\n<pre><code class=\"language-javascript\">// add a new package to the starting state\nconst nextState = curriedProduce(initState, {\n  type: 'ADD_PACKAGE',\n  package: newPackage,\n});\n\n// update an item in the recently produced state\nconst nextState2 = curriedProduce(nextState, {\n  type: 'SET_INSTALLED',\n  name: 'immer',\n  installed: true,\n});\n</code></pre>\n\n<p>Note that in a React application when using the <code>useReducer</code> hook, we don’t need to pass the state explicitly as I’ve done above because it takes care of that.</p>\n\n<p>You might be wondering, would Immer be getting a <code>hook</code>, like everything in React these days? Well, you’re in company with good news. Immer has two hooks for working with state: the <code>useImmer</code>  and the <code>useImmerReducer</code> hooks. Let’s see how they work.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Using The <code>useImmer</code> And <code>useImmerReducer</code> Hooks</h3>\n\n<p>The best description of the <code>useImmer</code> hook comes from the use-immer README itself.</p>\n\n<blockquote>\n<code>useImmer(initialState)</code> is very similar to <a href=\"https://reactjs.org/docs/hooks-state.html\"><code>useState</code></a>. The function returns a tuple, the first value of the tuple is the current state, the second is the updater function, which accepts an <a href=\"https://github.com/mweststrate/immer#api\">immer producer function</a>, in which the <code>draft</code> can be mutated freely, until the producer ends and the changes will be made immutable and become the next state.</blockquote>\n\n<p>To make use of these hooks, you have to install them separately, in addition to the main Immer libarary.</p>\n\n<pre><code class=\"language-bash\">yarn add immer use-immer\n</code></pre>\n\n<p>In code terms, the <code>useImmer</code> hook looks like below</p>\n\n<pre><code class=\"language-javascript\">import React from \"react\";\nimport { useImmer } from \"use-immer\";\n\nconst initState = {}\nconst [ data, updateData ] = useImmer(initState)\n</code></pre>\n\n<p>And it’s as simple as that. You could say it’s React’s useState but with a bit of steroid. To use the update function is very simple. It receives the draft state and you can modify it as much as you want like below.</p>\n\n<pre><code class=\"language-javascript\">// make changes to data\nupdateData(draft =&gt; {\n  // modify the draft as much as you want.\n})\n</code></pre>\n\n<p>The creator of Immer has provided a <a href=\"https://codesandbox.io/s/l97yrzw8ol\">codesandbox</a> example which you can play around with to see how it works.</p>\n\n<p><code>useImmerReducer</code> is similarly simple to use if you’ve used React’s <code>useReducer</code> hook. It has a similar signature. Let’s see what that looks like in code terms.</p>\n\n<pre><code class=\"language-javascript\">import React from \"react\";\nimport { useImmerReducer } from \"use-immer\";\n\nconst initState = {}\nconst reducer = (draft, action) =&gt; {\n  switch(action.type) {      \n    default:\n      break;\n  }\n}\n\nconst [data, dataDispatch] = useImmerReducer(reducer, initState);\n</code></pre>\n\n<p>We can see that the reducer receives a <code>draft</code> state which we can modify as much as we want. There’s also a <a href=\"https://codesandbox.io/s/2zor1monvp\">codesandbox</a> example here for you to experiment with.</p>\n\n<p>And that is how simple it is to use Immer hooks. But in case you’re still wondering why you should use Immer in your project, here’s a summary of some of the most important reasons I’ve found for using Immer.</p>\n\n<div class=\"sponsors__lead-place\"></div>\n\n\n\n\n<h3>Why You Should Use Immer</h3>\n\n<p>If you’ve written state management logic for any length of time you’ll quickly appreciate the simplicity Immer offers. But that is not the only benefit Immer offers.</p>\n\n<p>When you use Immer, you end up writing less boilerplate code as we have seen with relatively simple reducers. This also makes deep updates relatively easy.</p>\n\n<p>With libraries such as <a href=\"https://github.com/immutable-js/immutable-js/\">Immutable.js</a>, you have to learn a new API to reap the benefits of immutability. But with Immer you achieve the same thing with normal JavaScript <code>Objects</code>, <code>Arrays</code>, <code>Sets</code>, and <code>Maps</code>. There’s nothing new to learn.</p>\n\n<p>Immer also provides structural sharing by default. This simply means that when you make changes to a state object, Immer automatically shares the unchanged parts of the state between the new state and the previous state.</p>\n\n<p>With Immer, you also get automatic object freezing which means that you cannot make changes to the <code>produced</code> state. For instance, when I started using Immer, I tried to apply the <code>sort</code> method on an array of objects returned by Immer’s produce function. It threw an error telling me I can’t make any changes to the array. I had to apply the array slice method before applying <code>sort</code>. Once again, the produced <code>nextState</code> is an immutable state tree.</p>\n\n<p>Immer is also strongly typed and very small at just 3KB when gzipped.</p>\n\n<h3>Conclusion</h3>\n\n<p>When it comes to managing state updates, using Immer is a no-brainer for me. It’s a very lightweight library that lets you keep using all the things you’ve learned about JavaScript without trying to learn something entirely new. I encourage you to install it in your project and start using it right away. You can add use it in existing projects and incrementally update your reducers.</p>\n\n<p>I’d also encourage you to read the <a href=\"https://medium.com/hackernoon/introducing-immer-immutability-the-easy-way-9d73d8f71cb3\">Immer introductory blog post</a> by Michael Weststrate. The part I find especially interesting is the “How does Immer work?” section which explains how Immer leverages language features such as <a href=\"https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">proxies</a> and concepts such as <a href=\"https://en.wikipedia.org/wiki/Copy-on-write\">copy-on-write</a>.</p>\n\n<p>I’d also encourage you to take a look at this blog post: <a href=\"https://desalasworks.com/article/immutability-in-javascript-a-contrarian-view/\">Immutability in JavaScript: A Contratian View</a> where the author, Steven de Salas, presents his thoughts about the merits of pursuing immutability.</p>\n\n<p>I hope that with the things you’ve learned in this post you can start using Immer right away.</p>\n\n<h4>Related Resources</h4>\n\n<ol>\n<li>\n<a href=\"https://github.com/immerjs/use-immer\"><code>use-immer</code></a>, GitHub</li>\n<li>\n<a href=\"https://github.com/immerjs/immer\">Immer</a>, GitHub</li>\n<li>\n<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Function\"><code>function</code></a>, MDN web docs, Mozilla</li>\n<li>\n<a href=\"https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>proxy</code></a>, MDN web docs, Mozilla</li>\n<li>\n<a href=\"https://en.wikipedia.org/wiki/Object_(computer_science)\">Object (computer science)</a>, Wikipedia</li>\n<li>“<a href=\"https://github.com/chidimo/immutability-in-js\">Immutability in JS</a>,” Orji Chidi Matthew, GitHub</li>\n<li>“<a href=\"https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\">ECMAScript Data Types and Values</a>,” Ecma International</li>\n<li>\n<a href=\"https://github.com/immutable-js/immutable-js/\">Immutable collections for JavaScript</a>, Immutable.js , GitHub</li>\n<li>“<a href=\"https://github.com/immutable-js/immutable-js/#the-case-for-immutability\">The case for Immutability</a>,” Immutable.js , GitHub</li>\n</ol>\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(ks, ra, il)</span>\n</div>\n\n\n              \n            \n          </div></article>\n",
            "enclosure": {},
            "categories": []
        },
        {
            "title": "Smashing Podcast Episode 18 With Mina Markham: How Can I Learn React?",
            "pubDate": "2020-06-16 05:00:00",
            "link": "https://www.smashingmagazine.com/2020/06/smashing-podcast-episode-18/",
            "guid": "https://www.smashingmagazine.com/2020/06/smashing-podcast-episode-18/",
            "author": "Drew McLellan",
            "thumbnail": "https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2cad0a9e-8f27-424b-b2df-a71dd12603ee/mina-markham-200x200.jpg",
            "description": "In this episode of the Smashing Podcast, we’re talking about learning React. What’s React like to work with, and how can experienced developers get started? I spoke to Mina Markham to find out.\nShow Notes Mina Markham on Twitter Mina’s personal website Weekly Update From Static Sites To End User JAMstack Apps With FaunaDB by Bryan Robinson Is Your Website Stressing Out Visitors? by Suzanna Scacca Mirage JS Deep Dive: Understanding Timing, Response And Passthrough (Part 3) by Kelvin Omereshone Building A Facial Recognition Web Application With React by Adeneye David Abiodun Internationalization In Vue With The Vue I18n Plugin by Timi Omoyeni Transcript Drew McLellan: She is a front-end architect, conference speaker and organizer, and lover of design systems.",
            "content": "\n            \n              <link rel=\"canonical\" href=\"https://www.smashingmagazine.com/2020/06/smashing-podcast-episode-18/\">\n<title>Smashing Podcast Episode 18 With Mina Markham: How Can I Learn React?</title>\n<article><header><h1>Smashing Podcast Episode 18 With Mina Markham: How Can I Learn React?</h1>\n                  \n                    \n                    <address>Drew McLellan</address>\n                  \n                  <time datetime=\"2020-06-16T05:00:00+00:00\" class=\"op-published\">2020-06-16T05:00:00+00:00</time><time datetime=\"2020-06-16T05:00:00+00:00\" class=\"op-modified\">2020-06-25T13:14:20+00:00</time></header><p><a href=\"https://twitter.com/MinaMarkham\"><img src=\"https://cloud.netlifyusercontent.com/assets/344dbf88-fdf9-42bb-adb4-46f01eedd629/2cad0a9e-8f27-424b-b2df-a71dd12603ee/mina-markham-200x200.jpg\" width=\"200\" height=\"200\" alt=\"Photo of Mina Markham\"></a>In this episode of the Smashing Podcast, we’re talking about learning React. What’s React like to work with, and how can experienced developers get started? I spoke to Mina Markham to find out.</p>\n\n\n\n<h3>Show Notes</h3>\n\n<ul>\n<li>\n<a href=\"https://twitter.com/minamarkham\">Mina Markham</a> on Twitter</li>\n<li>Mina’s <a href=\"https://mina.codes/\">personal website</a>\n</li>\n</ul>\n<h4>Weekly Update</h4>\n\n<ul>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/static-sites-jamstack-apps-faunadb/\">From Static Sites To End User JAMstack Apps With FaunaDB</a> by Bryan Robinson</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/website-stressing-out-visitors/\">Is Your Website Stressing Out Visitors?</a> by Suzanna Scacca</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/mirage-javascript-timing-response-passthrough/\">Mirage JS Deep Dive: Understanding Timing, Response And Passthrough (Part 3)</a> by Kelvin Omereshone</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/facial-recognition-web-application-react/\">Building A Facial Recognition Web Application With React</a> by Adeneye David Abiodun</li>\n<li>\n<a href=\"https://www.smashingmagazine.com/2020/06/internationalization-vue-i18n/\">Internationalization In Vue With The Vue I18n Plugin</a> by Timi Omoyeni</li>\n</ul>\n<h3>Transcript</h3>\n\n<p><span class=\"smashing-tv-host\">Drew McLellan:</span> She is a front-end architect, conference speaker and organizer, and lover of design systems. Her work on the Pantsuit patent library for Hillary Clinton’s Hillary for America presidential campaign marked a watershed for design systems within the industry and was featured on publications, such as Wired, Fast Company, and Communication Arts. Like many of us, she writes code for a living, currently as a senior engineer at Slack. So we know she’s a talented and forward thinking developer, but did you know she was once mistaken for Patrick Swayze? My smashing friends, please welcome Mina Markham. Hi Mina. How are you?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina Markham:</span> I’m smashing.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Good to hear. Now, sometimes on the Smashing Podcast, we talk to people about the subject that they’re best known for. And sometimes it’s fun just to talk about something a bit tangential. Now, I could chat to you all day about pattern libraries, design systems, the amazing work you’ve done in that particular area, and I could talk to you about subjects that you’ve perhaps spoken about, events, such as the Event Apart, things like art direction. And we could obviously talk about CSS until the cows come home. But you tweeted a few days ago, and I realized that we’re actually both in the same boat in that we’re both experienced front-end engineers and we’re both recently started working with React. So before we get onto React itself, where were you coming to up to this point? Had you been working with other libraries and frameworks for JavaScript development?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> No, actually I’ve been doing mostly vanilla JavaScript for a while. And before that, of course I got into JavaScript. Let me rephrase that. I started working with Java script using jQuery because it made the most sense to me. It was something that was very easily for me to parse to figure out what was happening. And then from there I backtracked to doing just vanilla, plain JavaScript, ESX, and I hadn’t really gotten too much into the framework wars. I had no, like I had no favorite. I had no dog in the fight. I was like, “For you, React, whatever. I don’t really care.” But times change.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> And in this sort of way of working with vanilla JavaScript, because I’ve done a lot of that myself as well. I’ve worked with various frameworks. I’ve done a lot with jQuery back in the day. I worked with YUI, Yahoo User Interface Library. Had you felt many of the pain points that something like React’s architecture tries to address?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I don’t think I ever had. I spent most of my career making websites versus web apps and things like that. So everything I did was pretty static up to a certain extent. So I never really had to deal with state management, things like that. So the pain points that React attempts to solve I had never really applied to the kind of work that I did.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Generally speaking, what’s the sort of nature of the projects that you’ve with React so far?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> It was actually only been the one project, which I’m currently working on and I can’t give away too many details because public company and all that good stuff.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Of course.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> But essentially what I’m trying to do is I’m trying to use React to, it’s a very interactive sort of product where I need people to be able to enter in and save data at a certain state and then manipulate it and generate something else with said data. And that’s just something that it’s not simple DOM manipulation at that point. It really is a lot of more complex, front-end manage of data and managing the state of said data. So there really was no other alternative but to use some kind of library that attempts to solve that problem. I knew I wouldn’t be able to get past with just plain JavaScript. I contemplated maybe handling somethings on the server side, but again, due to the very interactive nature of what I’m working with, it need to be in the client. And so we already use React at Slack for various other things. And so I was like, “Okay, well we just should go ahead and adopt the same thing that the rest of the parent the companies are using and go from there.”</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> One of the things that I’m always seems to be a pain point with people picking up React is getting to grips with the tool chain that’s needed to get things working, Webpack being an obvious elephant in the room. Have you had to do much configuration of the tool chain or like me if you had the luxury of teammates doing it for you?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Oh, I love the infrastructure team at Slack the data. The front-end infrastructure team at Slack, they handled all of that. I didn’t have to think about it. It was great. Because I tried to learn React before in the past. Usually the way I learn best is by actually working and implementing on things. And we use React to build a lot of hillaryclinton.com back in 2016. So it’s not like I’ve never worked with people who use it. It’s just my work never directly needed me to get involved. But that code base was very complex and very sophisticated, and there was so much happening that there’s such a barrier to entry to try to learn anything in there if you didn’t already know how React and Redux and all of that works, which I didn’t. So I wasn’t really effective in learning in that environment.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Luckily, here I do have people to like take away a little bit more of the complex bits of it. I don’t have to worry about the Webpack config at all. That’s been set up. That’s been tried and tested and ready to go. I am in a similar boat where we also use Redux in addition to React, which I didn’t realize were two different things. I didn’t know which part handled which. Dropping into a code base like that, it was a little disorienting because I didn’t realize that they were all the same thing. I had people who were seasoned React developers telling me, “Oh, we also are using Redux, which makes it a little bit harder for you to really learn what React all can do if you’re starting from scratch.” And I never quite knew what they meant by that because I didn’t know what they were talking about.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> To answer your original question, I am still having a little bit more of a little bit barrier to entry, because it’s not just learning React. I’m having to learn React and also how to use the Redux store. So those two things at the same time can be a little much.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Yeah, I’ve found exactly the same thing coming into an existing code base as my first React project that uses Redux. And I think as is the nature of any of these sort of technologies when they’re young, they iterate really quickly, and what’s best practice at one point, 6 months later has moved on and there’s a different way of doing things. And when you have a code base that spans many years, you can sometimes have different styles of implementing things in there. It doesn’t always keep sync. And of course, if you’re following a tutorial or whatever to learn, you’re reading books, you’re using resources, they will be in the most modern version of how to do things. And that doesn’t necessarily nit to what you see when you look at an existing, mature product. Is that something you’d experienced at all, or have you managed to keep your code base really up to date?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I think that is something that I definitely have been experiencing. When I tried to learn how to do React on my own, I looked at various tutorials and things like that. And I noticed, or at least people have told me who have worked who have been working with me that some of the things that we do or kind of anti-pattern or not quite how things work now, because this code base is slightly, well mature us relative, but it’s a few years old. And so there are some ways that I guess are easier to do things than the way we’re doing them currently because this was written years ago. So it’s a little bit of a treadmill trying to keep up with current times and make sure I want to do things the best way, but also I don’t want to break an established code base because I want to play around with stuff.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Obviously, one of the things with React that people like you and I are coming to it, it can feel a bit jarring as this whole thing with JSX. Are you using JSX in your project?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> We are. I am using JSX.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Have you made peace with that?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I fell like a little small piece of me dies every time I open one of those files. It still feels sacrilege to put my HTML in the JavaScript file. I know that’s kind of revolutionary and the whole point, but it just feels off to me that I’m writing my markup in a JavaScript file. I’ve made peace with it, but every time I do it, I’m just like, “…” Separation concerns, it is a thing. I’d like it back, please.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> It’s a valid point, isn’t it? My background when I was starting to work more seriously with JavaScript, and this was probably when I was back at Yahoo, things were very much on the model of server rendered HTML pages and then taking a progressive enhancement approach, layering JavaScript on top to enhance the interface. And if the state of something in the interface needed to change, your code had to know about all the parts of the interface that it needed to update, which obviously leads you to a tightly coupled approach with these big monolithic views where the code you write needs to know about all the other code around it. And I guess that doesn’t really lend itself to a componentized approach which you would take when working with a pattern library or a design system, which is more to your area of particular expertise. I guess, React lends itself more to that approach, does it?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I think it does, especially with the being able to couple the very specific CSS to one JSX or one React component. And so that way it makes it much easier to separate or only take what you need for the library and leave the rest, whereas a pattern library or design system that attempts to do something more monolithic with just one big style CSS file or something like that, it does make it a lot difficult. You kind of have to take it all or nothing. So I do appreciate that React allows us to do more individualized, more componentized way of development, even if I still wish there was a way for me to do truly separate my presentation layer and my content layer from my interactivity layer. But maybe that’s just me being a little bit old school in that sense.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> I definitely feel the pain there. The idea is that, come and correct me if I’m wrong, my understanding is that rather than separating the technologies, the CSS, and the JavaScript, and the HTML, it’s separating the functionality. So everything that is one component all exist together-</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> … which I guess is useful if that component then is no longer needed. You can just delete it, and it’s gone, and it doesn’t leave a footprint around your app. That’s not always the case with CSS though. How are you working with CSS with React? Have You looked at things like styled-components or anything like that?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> No, we haven’t. I’ve heard of styled-components, but I’ve never quite really investigated them very fully to be perfectly honest. So the way that we’re working with CSS with React is we write Less, and we just have a Less file attached to each individual component that gets imported into that component. And then it gets bonded up via Webpack and served to the client.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Are you using a system like BEM or something to turn namespace?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah. We’re using BEM for namespacing, although the adherence to it is kind of varied depending on who’s writing what. But we try to use a BEM namespacing pattern to make it a little bit clearer what the purpose of each individual class and component is.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> And does that seem to be working successfully for you?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I think so. Occasionally it kind of has the same old problem of I sometimes don’t know how to name something. After a while daily things has always and will always be a difficult thing for master. So that’s the only issue I have with is I occasionally I have no idea what I should call a particular component.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Definitely. That’s a constant battle, isn’t it, how to out the name things?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> I always end up when working on a new feature or something like that, you give a component and all the classes and everything the name that the feature has got at the moment. And then by the time you come to launch, it’s been renamed something else. So you have references to the old name in the code and the interface has the new name. And …</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I try to always name things based on the function or the purpose of it versus things that are a little bit more ephemeral, because it’s less likely that the actual purpose of this component will change. I forgot to mention, but in addition to using BEM, I guess we use BEMITs if you’re familiar with that. It’s basically the ITCSS plus BEM, both of which were created by Harry Roberts. So I use Hungarian notation to denote whether or not something is a component, versus a layout object, versus like a larger pattern comprised of multiple components. And then from there we use the BEM convention to signify like the block element and all that.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> And have you had to do much refactoring and deleting of components and things in your code base and had to deal with the issue of CSS getting left behind?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah. So the non-React part of my job, of maintaining slack.com is that’s all just a bunch of Less files that are being compiled for CSS. And I guarantee you, there’s a lot of zombie code in there, because we definitely iterate above things a lot in the time I’ve been there. And we don’t always have time to go back and do the cleanup versus when we redesign a page or something. So it’s overdue for an audit, I’ll say that.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> This is something that we’ve just been looking at in our React project, looking at how we approach CSS. At the moment, we have a few big, global CSS files for the whole of the app, and we do get this situation where our bundle size is just growing, and growing, and growing and never gets any smaller, even though things do get removed. So we’ve been looking at things like styled-components, Tailwind as well is another option that we’re really seriously considering. Have you looked at tailwind much?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I haven’t looked at it a lot. I’ve been curious about it, but again, I’ve never really had time to dig in to actually see if it’s something that I want to try to bring into our code base.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> I was actually quite surprised, because like you, I’m a bit old school with how to do these things. I like nice separation of concerns. And I like to write my CSS in CSS, and of course the approach with Tailwind is you have all these class names, which feel a bit like inline styles that you’re applying. And if it feels dirty.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> And I volunteered within the team, we each which took a technology to investigate if they’d be a good fit for our problems, and I volunteered to look at Tailwind because I was absolutely certain I was going to hate it.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> No, no.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> But it turns out I actually think it solves a lot of problems. I was quite impressed.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah. I’ve sort of come around to a similar way of thinking, because I in the past would much prefer to have one class comprise all of the styles I needed for a particular component and not do a class per property, as I believe Tailwind does or languages like it do. For the similar reasons, it felt very much like, “Well, I’m just running inline CSS at this point. Why would I do this?” But as I’ve been developing more and more, inside of our Slack design system, I created a bunch of what I call utility classes that do things like add a bit of margin with a pattern. I’ve noticed that more and more, I’m using those classes in addition to the component classes. So I’m like, “Okay, well maybe I should revisit this whole to doing a CSS as a one declaration at a time.” I don’t know if I’d go that far, but it’s definitely worth considering.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Computing seems to flip flop in terms of trends between thin clients and fat clients solutions. We started with mainframes with terminals, and then the PC era with windows and office and all these sort of big applications. And they were all getting really slow, and than the web came along, and that was just a browser, and all the work was being done on the server. And it was all fast and snappy again. And now we’ve gone back to putting all that work back in the browser with everything being done with JavaScript, things like React and the JAMstack approach where we’re back to a sort of fat client. I sometimes worry that we’re asking too much of the browser. Is this a mistake? Are we asking too much of the browser trying to do all this stuff in React?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I want to say yes with the caveat of, again, my experience is very much contained to mostly static websites. I don’t do a lot of product development. So maybe in that realm, this makes more sense. But from my perspective, I feel like we’re a lot of the times using a hatchet when we just need a butter knife. I don’t know why we need put all this in the browser, put so much work and so much pressure on the client. I feel like we could do this much simpler. One of the things that always made me a little hesitant to use React, or I say hesitant, but what I mean when it made me viscerally angry and I actively opposed, was when I would go to a website and literally nothing would render because there was one error or something, Like, “Really? The entire page is broken because one function broke down?”</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> It just kind of annoyed me that a lot of times it was an all or nothing approach. One of the talks that I gave at AEA in the past and other places in the past was talking about how to include progressive enhancement and not just your development, but also of art direction and design of sites. And I would point out specifically examples of websites that didn’t do progressive enhancement or any kind of graceful degradation. It was like either you have the JavaScript running in the browser or you get absolutely nothing. And it would be like just a simple site that represent information about the history of web design, which was one of the sites actually talked about, the history of web design from like 1990 until now. It was a beautiful website with lots of timelines, animation of things. But it also could have been rendered statically with just a list. There were steps in between showing nothing and showing that beautifully enhanced experience that I think got lost because of the way we’ve been approaching modern web development now.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> So would you say there are absolutely some categories of projects that suit a solution like React and some where it really shouldn’t be used and you should be using more traditional methods?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I think that if your site particularly is mostly static, it was just serving up information, I guess I don’t understand why you need a project like React to render something that doesn’t have a lot of interaction beyond just DOM manipulation. I guess I don’t see what benefit you get from that. Again, I may not be working on the appropriate projects. I may not just have seen or found that use case, but I’m having a hard time seeing if it’s just mostly static site, presenting content, not a lot interaction, not a lot of interaction beyond manipulated DOM and doing animations. I don’t see how having a React library helps you accomplish that goal.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> It’s interesting because I’m not bad talking it because I haven’t actually used it, but I see a lot of Gatsby projects and Gatsby being a static site generator that uses a React front-end in it. And I see all the examples of the themes and things they have available are all content based sites, or blogs, and a recipe site, and a portfolio, and these sort of things. And there’s something I think actually that this isn’t necessarily the right fit for something like React. Why isn’t this being statically rendered and then progressively enhance?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> It’s not software.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah. I haven’t actually used Gatsby either. I’ve heard plenty of great things about it, but that’s probably one of the examples I would think of where I’m like, “Okay, I guess I’m just not seeing why that tool is necessary to do that particular job.” Again, I don’t know. Maybe it’s just because more people are comfortable writing in React when they are writing new something else, and it’s just providing a tool that meets people where they are. I’ve heard great things about static site generators that use React for people who have used them and love them, but it’s not a use case that I would have immediately been like, “Oh, that makes sense.”</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> It seems like there’s always been this battle between what we would call a website and what you might call a web app. And the chasm between the two seems to be getting wider, and wider, and wider, whereas a progressive enhancement approach tries to bridge the gap by taking something static and adding JavaScript and adding interactivity. It seems that things like React are ideally suited for software that you’re running in the browser. Would you agree with that?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I would definitely agree with that because it feels like it’s was built for that type of environment; it was built for running software. It was built by Facebook for Facebook. So it was built for a product. It was built for running whatever you call a web app in the browser and not necessarily for the type of work that, as I mentioned, I’m used to doing. So I think in those scenarios, it definitely makes a lot of sense to use it if you’re building a more complex, more sophisticated piece of software that’s meant to run inside of a browser. But if you’re building a marketing site or whatever, I guess I would still struggle to see why it will be necessary there.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> So are we giving people permission to still build decent, statically rendered websites?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I would love to see more of that happen. I feel like that’s kind of gotten lost and it’s sort of lost its, if it ever was cool or whatever. I feel like we’ve lost that part of web development. It’s so funny: you and I both said that we’re kind of old school, and I laugh at that because I’ve actually been doing web development for, what, six years now? How am I old school? It hasn’t been that long for me. And yet somehow I’m part of the old guard who doesn’t like new and shiny things. I don’t get it.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> So in fact React has actually existed for the whole time that you’ve been a web developer.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Maybe I just have an old soul. I don’t know.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> I think that’s probably the case. I’ve not looked personally at, there are service side rendered approaches you can take with React apps. Have you experienced any of those?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I haven’t experienced any them. I briefly looked into them for the project I’m currently working on, because I feel like there’s parts of the operation that would work better on a server versus in the clients. But I think because of my limited knowledge and the fact that the code base is a little more complicated than I can understand, I wasn’t quite able to figure out how to make that part work. I would love to figure it out eventually, but I spent a day digging into it. I was like, “You know what? I’m not grokking this away I need to be. So I’m just going to back up and take a different route.”</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Yeah. I think we’ve all been there.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah. I went down a path. I was like, “Oh, this is dark and scary. Let’s reverse. Let’s reverse.”</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Step away from the code.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yes.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> So you’ve been very diplomatic and polite about React so far. I sense that there’s some tension bubbling under the surface a bit. Come on. Tell us what you really feel.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I have been polite and diplomatic, mostly because the Reacts fan base can be a little mean sometimes, and I would rather not have them come for me. So please, React is great. It’s wonderful. Use it for what you want to use it for. I kid, but even that tweet that you mentioned at the beginning of this podcast where I think what you said is that I don’t hate it. I don’t love it, but I don’t hate it. Even that statement, I got people, there was no vitriol, but it was more they where ready to leap to the defense and say, “Well, I love it because X, Y, Z.” I’m like, “I didn’t say it was bad. I just said that I’m meh about the whole thing.” But apparently being meh is not okay. I have to love it.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> So that’s why I probably have been a bit more diplomatic than I would ordinarily be, just because I don’t want people to think that I’m bad mouthing it, because I’m not. It has a place in more web development. It serves a function. It does its job well. People love it. It’s just not a tool that I’ve ever had or wanted to use until now.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Yeah. Things can get very tribal, can’t they, with people feeling like they have to take one side or another, and you’re either absolutely for something or absolutely against something? And I’m not sure it serves a good purpose, and I don’t think it really moves us forward as an industry and as a community to do that.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah. It’s really odd. It’s fascinating to watch from just a sociological standpoint, but it’s often just really like weird to observe. It’s like I’m not allowed to just be, like I said, neutral about certain things. I have to have a strong opinion, which is I don’t think healthy. What’s the term, “Strong opinions, loosely held?” That’s kind of the way I go about things. I feel strongly about certain things, but it’s not like you can’t change my mind. Where I feel like some people, their identity gets wrapped up into certain aspects of it ,that if you are not for whatever they’ve chosen to identify with, it’s a personal slight versus just, I don’t care about this particular topic, or tool, or whatever.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Yes. I don’t know if it’s made worse by the fact that we all are sort of tending to specialize a lot more in particular parts of the stack. And I know there are people who are React developers. They would call themselves a React developer because that’s what they work in. And they wouldn’t necessarily write any vanilla Java script or wouldn’t use Vue or whatever. React is their world. So I guess it almost feels like an attack on their entire career to say, “I don’t like React.” Well, they’re really invested in making you like React or whatever the technology may be.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I will admit to being one of those people in the past. Actually, probably it was mostly about SASS, I believe. I was very much on the team of doing SASS as a preprocessor and all other preprocessors are trash. I don’t want to talk about them. I don’t want to deal with them. And I realized that was a very narrow way to look at things. Use the appropriate tool for the job. Whatever makes you more productive, that’s the right tool. It doesn’t really matter what it is.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Are there any technologies that we work with that don’t have that sort of tribal feel? Is there anything that people are just happy to use or not use? I can’t think of anything.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Wow. No one has opinions about markup, actually.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> No.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I feel like no one has opinions about like actual HTML and just markup, just like, “It’s there.” They use it. But people have strong opinions about CSS and how it’s either terrible or wonderful, and the preprocessor wars that don’t really happen all that much anymore, and then of course, all of the tribalism within the various JavaScript libraries.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> So you would say your journey so far with React is still just, “It’s a tool. It does its job?”</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> It went from a curiosity to active and visceral dislike because of how prevalent it was and how I unnecessary I thought that that prevalence was to meh. I’m now with meh, which again does not mean I hate it. It just means …</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> I think that’s a good place to be. I think we’re probably all sort of stronger as technologists if we understand the value of a particular technology for its purpose. We can evaluate what is good for what circumstance and pick the right tool for the job.</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah. And that’s kind of where I’ve arrived at this point in my career where I don’t get really invested in any particular language, or technology, or whatever, because it’s like, “Just whatever tool is most appropriate for what you’re trying to do, then use that.” I’ve learned that there’s a place for everything; there’s a time and a place to do everything. And up until recently, there was no real time or place for me to use this React librarian, and now there is.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> I think that’s a good place to be. So I’ve been learning all about React lately as you have in the day job. Is there anything else that you’ve been learning about lately?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> I’ve actually learned ironically, which is I think another language that has originated at Facebook, I’ve been doing a lot of Hack development, mostly because that’s what I use at Slack, at my day job. Learning Hack paved the way for me to get more comfortable using React because they follow very similar patterns, except one is server side and one’s not. So that, along with just in general, I’ve been learning more about the back-end and how that works for various different reasons. And I’ve been stretching myself for the past couple years and getting more and more outside of my comfortable zone. Design systems, libraries, that’s very much my world, and I feel very good and comfortable in that world. But I’m stepping outside of it and doing a lot more server side logic, and API development, and data modeling, and all of that. I’ve been doing a lot on that for the past year as well.</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> I find that the more I understand about the whole stack about back-end stuff in front-end stuff, each one helps my knowledge of the other. I find I write better front-end code by having written back-end code and understanding-</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Yeah. I think I feel the same way. Now that I have a better idea of, like we said, the whole stack of how we get from the data to the end client. I find that I’m thinking about the entire pipeline no matter what part I’m actually working in. I’m thinking about what’s the best way to structure this API so that when I get to the template, I don’t have to do so much manipulating of the data that I receive on that end of it. It’s definitely made me overall a better engineer, I feel like it</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> If you, dear listener, would like to hear more from Mina, you can follow her on Twitter where she’s @MinaMarkham and find her personal site at mina.codes. Thanks for joining us today, Mina. Do you have any parting words?</p>\n\n<p><span class=\"smashing-tv-speaker\">Mina:</span> Have a smashing night?</p>\n\n<p><span class=\"smashing-tv-host\">Drew:</span> Great.</p>\n\n<div class=\"signature\">\n  <img src=\"https://www.smashingmagazine.com/images/logo/logo--red.png\" alt=\"Smashing Editorial\"><span>(il)</span>\n</div>\n\n\n              </article>\n",
            "enclosure": {},
            "categories": []
        }
    ]
}